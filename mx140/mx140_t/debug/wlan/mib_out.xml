<?xml version="1.0" encoding="UTF-8"?>
<!-- *!*!*!* THIS FILE MUST BE MODIFIED ONLY IN THE MAIN BRANCH AND MERGED INTO OTHER BRANCHES, NOT THE OTHER WAY ROUND *!*!*!* -->
<metadata_list xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="HydraMeta.xsd">
    <metadata version="498001530" subsystem_name="wlan" subsystem_layer="fw" subsystem_id="2">
        <source_control id="$Id$" time="$DateTime$" change="$Change$" author="$Author$" />
        <enum_def enum_name="EnumYesNo">
            <enum_entry enum_label="yes" enum_value="1" />
            <enum_entry enum_label="no" enum_value="0" />
        </enum_def>
        <enum_def enum_name="EnumEnableDisable">
            <enum_entry enum_label="enable" enum_value="1" />
            <enum_entry enum_label="disable" enum_value="0" />
        </enum_def>
        <enum_def enum_name="unifiCSROnlyMIBShield">
            <enum_entry enum_label="open" enum_value="1" />
            <enum_entry enum_label="warn" enum_value="2" />
            <enum_entry enum_label="guard" enum_value="3" />
            <enum_entry enum_label="alarm" enum_value="4" />
        </enum_def>
        <enum_def enum_name="unifiCSROnlyRawRegisterStatus">
            <enum_entry enum_label="active" enum_value="1" />
            <enum_entry enum_label="notInService" enum_value="2" />
            <enum_entry enum_label="notReady" enum_value="3" />
            <enum_entry enum_label="createAndGo" enum_value="4" />
            <enum_entry enum_label="createAndWait" enum_value="5" />
            <enum_entry enum_label="destroy" enum_value="6" />
        </enum_def>
        <enum_def enum_name="unifiExternalFastClockRequest">
            <enum_entry enum_label="no_clock_request" enum_value="0" />
            <enum_entry enum_label="totem_pole" enum_value="1" />
            <enum_entry enum_label="inverted_totem_pole" enum_value="2" />
            <enum_entry enum_label="open_drain" enum_value="3" />
            <enum_entry enum_label="open_source" enum_value="4" />
        </enum_def>
        <enum_def enum_name="unifiMLMEFaultReportLevel">
            <enum_entry enum_label="none" enum_value="0" />
            <enum_entry enum_label="detailed" enum_value="1" />
        </enum_def>
        <enum_def enum_name="unifiPioHostWakeMode">
            <enum_entry enum_label="wake_none" enum_value="1" />
            <enum_entry enum_label="wake_pulse" enum_value="2" />
        </enum_def>
        <enum_def enum_name="unifiPioHostWakePolarity">
            <enum_entry enum_label="positive" enum_value="0" />
            <enum_entry enum_label="negative" enum_value="1" />
        </enum_def>
        <enum_def enum_name="unifiPioHostWakeZeal">
            <enum_entry enum_label="wake_normal" enum_value="0" />
            <enum_entry enum_label="wake_always" enum_value="1" />
        </enum_def>
        <enum_def enum_name="unifiRadioCalibrationMode">
            <enum_entry enum_label="calibrate_auto" enum_value="0" />
            <enum_entry enum_label="calibrate_now" enum_value="1" />
            <enum_entry enum_label="no_calibrate" enum_value="2" />
        </enum_def>
        <enum_def enum_name="unifiUartPios">
            <enum_entry enum_label="no_pios" enum_value="1" />
            <enum_entry enum_label="tx_rx_only" enum_value="2" />
            <enum_entry enum_label="tx_rx_rts_cts" enum_value="3" />
        </enum_def>
        <enum_def enum_name="unifiRateStatsIndex">
            <enum_entry enum_label="rate_1m" enum_value="1" />
            <enum_entry enum_label="rate_2m" enum_value="2" />
            <enum_entry enum_label="rate_5m5" enum_value="3" />
            <enum_entry enum_label="rate_6m" enum_value="4" />
            <enum_entry enum_label="rate_9m" enum_value="5" />
            <enum_entry enum_label="rate_11m" enum_value="6" />
            <enum_entry enum_label="rate_12m" enum_value="7" />
            <enum_entry enum_label="rate_18m" enum_value="8" />
            <enum_entry enum_label="rate_24m" enum_value="9" />
            <enum_entry enum_label="rate_36m" enum_value="10" />
            <enum_entry enum_label="rate_48m" enum_value="11" />
            <enum_entry enum_label="rate_54m" enum_value="12" />
        </enum_def>
        <enum_def enum_name="unifiThroughputDebugIndex">
            <enum_entry enum_label="no_ack_count"  enum_value="1" />
            <enum_entry enum_label="good_fcs_count"  enum_value="2" />
            <enum_entry enum_label="bad_fcs_count" enum_value="3" />
            <enum_entry enum_label="missed_ba_count"  enum_value="4" />
            <enum_entry enum_label="missed_ack_count"  enum_value="5" />
            <enum_entry enum_label="ba_agg_below_quarter"  enum_value="6" />
            <enum_entry enum_label="ba_agg_above_quarter" enum_value="7" />
            <enum_entry enum_label="mpdus_total_transmitted_on_air" enum_value="8" />
            <enum_entry enum_label="mpdus_successfully_transmitted" enum_value="9" />
            <enum_entry enum_label="mpdus_failed_transmit" enum_value="10" />
            <enum_entry enum_label="laa_rate_decrease_counter" enum_value="11" />
            <enum_entry enum_label="laa_rate_increase_counter" enum_value="12" />
            <enum_entry enum_label="dplane_paused_counter" enum_value="13" />
            <enum_entry enum_label="dplane_resumed_counter" enum_value="14" />
            <enum_entry enum_label="missed_sq_num_counter"  enum_value="15" />
            <enum_entry enum_label="duplicate_rcv_counter"  enum_value="16" />
            <enum_entry enum_label="dplp_free_resources_cb_counter" enum_value="17" />
            <enum_entry enum_label="lowest_fh_resources" enum_value="18" />
            <enum_entry enum_label="highest_th_resources" enum_value="19" />
            <enum_entry enum_label="scan_started_counter" enum_value="20" />
            <enum_entry enum_label="outstanding_fh_mbulk" enum_value="21" />
            <enum_entry enum_label="outstanding_th_mbulk" enum_value="22" />
            <enum_entry enum_label="cpu_usage" enum_value="23" />
            <enum_entry enum_label="coex_collisions" enum_value="24" />
            <enum_entry enum_label="mac_bad_sig_count" enum_value="25" />
            <enum_entry enum_label="tx_under_flow" enum_value="26" />
            <enum_entry enum_label="rx_ampdu_dlim_crc_err" enum_value="27" />
            <enum_entry enum_label="rx_mpdus_in_ampdus" enum_value="28" />
            <enum_entry enum_label="rx_mpdus" enum_value="29" />
        </enum_def>
        <enum_def enum_name="unifiReadRegIndex">
            <enum_entry enum_label="MAC_DOT11_FCS_ERROR_COUNT" enum_value="1" />
            <enum_entry enum_label="MAC_DOT11_FCS_GOOD_COUNT" enum_value="2" />
            <enum_entry enum_label="MAC_BAD_SIG_COUNT" enum_value="3" />
            <enum_entry enum_label="MAC_TX_UNDER_COUNT" enum_value="4" />
            <enum_entry enum_label="MAC_NO_ACK_COUNT" enum_value="5" />
            <enum_entry enum_label="MAC_DOT11_RX_OCTETS_IN_AMPDUS" enum_value="6" />
            <enum_entry enum_label="MAC_DOT11_RX_AMPDUS_COUNT" enum_value="7" />
            <enum_entry enum_label="MAC_DOT11_RX_MPDUS_IN_AMPDUS_COUNT" enum_value="8" />
            <enum_entry enum_label="MAC_DOT11_RX_AMPDU_DELIM_CRC_ERR_COUNT" enum_value="9" />
        </enum_def>
        <enum_def enum_name="unifiAccessClassIndex">
            <enum_entry enum_label="AC_BK" enum_value="1" />
            <enum_entry enum_label="AC_BE" enum_value="2" />
            <enum_entry enum_label="AC_VI" enum_value="3" />
            <enum_entry enum_label="AC_VO" enum_value="4" />
        </enum_def>
        <enum_def enum_name="unifiDefaultCountryIndexVals">
            <enum_entry enum_label="country_code_default_idx" enum_value="1" />
            <enum_entry enum_label="country_code_vif1_idx" enum_value="2" />
            <enum_entry enum_label="country_code_vif2_idx" enum_value="3" />
            <enum_entry enum_label="country_code_end_idx" enum_value="4" />
        </enum_def>
        <enum_def enum_name="unifiHardwarePlatform">
          <!--
              These must match the firmware enum halradio_hw_plat.
              Current values:
               1 - UNIV2 board
               2 - UNIV2 with removed diplexer for improved 2G performance. Only suitable for 2G.
               4 - ON5 rev2
               8 - ON5 rev3+
              16 - UNIV3
              32 - J3POP
              64 - XCOVER4
          -->
            <enum_entry enum_label="UNIV2" enum_value="1" />
            <enum_entry enum_label="UNIV2_NO_DIPLEXER" enum_value="2" />
            <enum_entry enum_label="ON5_REV2" enum_value="4" />
            <enum_entry enum_label="ON5_REV3" enum_value="8" />
            <enum_entry enum_label="UNIV3" enum_value="16" />
            <enum_entry enum_label="J3POP" enum_value="32" />
            <enum_entry enum_label="XCOVER4" enum_value="64" />
        </enum_def>
        <enum_def enum_name="unifiDebugModulesIndex">
            <enum_entry enum_label="MODULE_IDS_RESERVED" enum_value="0" />
            <enum_entry enum_label="MODULE_IDS_MLME_SCAN" enum_value="1" />
            <enum_entry enum_label="MODULE_IDS_FAULTS" enum_value="2" />
            <enum_entry enum_label="MODULE_IDS_MLME_CME" enum_value="3" />
            <enum_entry enum_label="MODULE_IDS_MLME_CONMGR" enum_value="4" />
            <enum_entry enum_label="MODULE_IDS_MLME_MIB" enum_value="5" />
            <enum_entry enum_label="MODULE_IDS_MLME_MPDU_ROUTER" enum_value="6" />
            <enum_entry enum_label="MODULE_IDS_MLME_REQUESTS" enum_value="7" />
            <enum_entry enum_label="MODULE_IDS_MLME_VIFCTRL" enum_value="8" />
            <enum_entry enum_label="MODULE_IDS_MLME_CONNECT" enum_value="9" />
            <enum_entry enum_label="MODULE_IDS_MLME_DEVICE" enum_value="10" />
            <enum_entry enum_label="MODULE_IDS_RICE" enum_value="11" />
            <enum_entry enum_label="MODULE_IDS_RICE_SAP" enum_value="12" />
            <enum_entry enum_label="MODULE_IDS_WLANLITE" enum_value="13" />
            <enum_entry enum_label="MODULE_IDS_MACRAME_SCHDL" enum_value="14" />
            <enum_entry enum_label="MODULE_IDS_PMALLOC" enum_value="15" />
            <enum_entry enum_label="MODULE_IDS_CME_MGMT" enum_value="16" />
            <enum_entry enum_label="MODULE_IDS_MACRAME_DPLANE" enum_value="17" />
            <enum_entry enum_label="MODULE_IDS_MLME_BA" enum_value="18" />
            <enum_entry enum_label="MODULE_IDS_MLME_BA_TX" enum_value="19" />
            <enum_entry enum_label="MODULE_IDS_MLME_AP_STA" enum_value="20" />
            <enum_entry enum_label="MODULE_IDS_MLME_REGULATORY" enum_value="21" />
            <enum_entry enum_label="MODULE_IDS_MLME_RAME" enum_value="22" />
            <enum_entry enum_label="MODULE_IDS_HALRADIO" enum_value="23" />
            <enum_entry enum_label="MODULE_IDS_MLME_ROAMING" enum_value="24" />
            <enum_entry enum_label="MODULE_IDS_DATAPLANE" enum_value="25" />
            <enum_entry enum_label="MODULE_IDS_MLME_IBSS" enum_value="26" />
            <enum_entry enum_label="MODULE_IDS_MLME_RMC" enum_value="27" />
            <enum_entry enum_label="MODULE_IDS_CRYPTO" enum_value="28" />
            <!-- COEX Note: DEBUG_COEX level should NOT exceed level 3 COEX task deinit has debugs defined at lvl4 which is aimed for Software testing (SWAT) only  -->
            <enum_entry enum_label="MODULE_IDS_COEX" enum_value="29" />
            <enum_entry enum_label="MODULE_IDS_MACRAME_PS" enum_value="30" />
            <enum_entry enum_label="MODULE_IDS_MACRAME_BLACKOUT" enum_value="31" />
            <enum_entry enum_label="MODULE_IDS_MLME_SA_QUERY" enum_value="32" />
            <enum_entry enum_label="MODULE_IDS_MLME_SEND_OFFCHANNEL" enum_value="33" />
            <enum_entry enum_label="MODULE_IDS_MLME_MEASUREMENTS" enum_value="34" />
            <enum_entry enum_label="MODULE_IDS_MLME_TDLS" enum_value="35" />
            <enum_entry enum_label="MODULE_IDS_MACRAME_BEACON" enum_value="36" />
            <enum_entry enum_label="MODULE_IDS_MACRAME_VIF" enum_value="37" />
            <enum_entry enum_label="MODULE_IDS_MACRAME_OXYGEN" enum_value="38" />
            <enum_entry enum_label="MODULE_IDS_MACRAME_CALIBRATION" enum_value="39" />
            <enum_entry enum_label="MODULE_IDS_MACRAME" enum_value="40" />
            <enum_entry enum_label="MODULE_IDS_MACRAME_TX" enum_value="41" />
            <enum_entry enum_label="MODULE_IDS_MACRAME_COEX_API" enum_value="42" />
            <enum_entry enum_label="MODULE_IDS_MLME_DATA" enum_value="43" />
            <enum_entry enum_label="MODULE_IDS_MACRAME_RADIO" enum_value="44" />
            <enum_entry enum_label="MODULE_IDS_MIB" enum_value="45" />
            <enum_entry enum_label="MODULE_IDS_MACRAME_FILTER" enum_value="46" />
            <enum_entry enum_label="MODULE_IDS_HALRADIO_HW_COUNTERS" enum_value="47" />
            <enum_entry enum_label="MODULE_IDS_HALRADIO_CORE" enum_value="48" />
            <enum_entry enum_label="MODULE_IDS_RICE_RSSI" enum_value="49" />
            <enum_entry enum_label="MODULE_IDS_MACRAME_MLME_API" enum_value="50" />
            <enum_entry enum_label="MODULE_IDS_MACRAME_IDLE_LITE" enum_value="51" />
            <enum_entry enum_label="MODULE_LAST_ID" enum_value="52" />
        </enum_def>
        <!-- Index -->
        <config_element name="unifiDefaultCountryIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>3</range_max>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiQueueStatsIndex" psid="0">
            <type>integer</type>
            <range_min>0</range_min>
            <range_max>15</range_max>
            <description_user> Index for unifiQueueStatsIdTable</description_user>
        </config_element>
        <config_element name="dot11RSNAConfigIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>1</range_max>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="dot11RSNAStatsIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>6</range_max>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiRoamScanTableIndex" psid="0">
            <description_user>Index for unifiRoamScanTable</description_user>
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>11</range_max>
        </config_element>
        <config_element name="unifiBeamformingPhaseSTS" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>4</range_max>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiPrivateOnlyPatchIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiPrivateOnlyRawDataMemoryIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>65535</range_max>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiPrivateOnlyRawRegisterIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiRateStatsIndex" psid="0">
            <type>unifiRateStatsIndex</type>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiThroughputDebugIndex" psid="0">
            <type>unifiThroughputDebugIndex</type>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiReadRegIndex" psid="0">
            <type>integer</type>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiTXPowerCompFrequencyIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>255</range_max>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiTXPowerCompTargetVoltageIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>255</range_max>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiTXPowerCompTemperatureIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>255</range_max>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiTxPowerAdjustmentIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>2</range_max>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiLoadDpdLutGroupIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>3</range_max>
            <description_user>group index</description_user>
        </config_element>
        <config_element name="unifiLoadDpdLutTemperatureIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>3</range_max>
            <description_user>temperature index</description_user>
        </config_element>
        <config_element name="unifiTxSettingsTableIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>32</range_max>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiTxGainSettingsTableIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>32</range_max>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiTxPowerDetectorResponseTableIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>64</range_max>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiTxDetectorTemperatureCompensationTableIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>32</range_max>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiTxDetectorFrequencyCompensationTableIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>32</range_max>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiTxOpenLoopTemperatureCompensationTableIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>32</range_max>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiTxOpenLoopFrequencyCompensationTableIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>32</range_max>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiTxAntennaConnectionLossTableIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>32</range_max>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiTxAntennaMaxGainTableIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>32</range_max>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiRxExternalGainTableIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>32</range_max>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiDebugControlTableIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>32</range_max>
            <description_user>table index</description_user>
        </config_element>
        <config_element name="unifiTxOOBConstraintTableIndex" psid="0">
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>16</range_max>
            <description_user>Index for unifiTxOOBConstraintTable</description_user>
        </config_element>
        <config_element name="unifiTxPowerAdjustTableIndex" psid="0">
            <description_user> Index for unifiTxPowerAdjustTable</description_user>
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>48</range_max>
        </config_element>
        <config_element name="unifiRegulatoryTableIndex" psid="0">
            <description_user> Index for unifiRegulatoryTable</description_user>
            <type>integer</type>
            <range_min>1</range_min>
            <range_max>200</range_max>
        </config_element>
        <config_element name="unifiAccessClassIndex" psid="0">
            <type>unifiAccessClassIndex</type>
            <description_user>table index</description_user>
        </config_element>
        <!-- Keeping track of the psids that were deleted -->
        <!-- Deleted: config_element name="unifiRSSIOffset" psid="2201" -->
        <!-- Deleted: config_element name="unifiRadioTrimCache" psid="2700" -->
        <!-- Deleted: config_element name="unifiVbattTrimThreshold" psid="2164" -->
        <!-- Deleted: config_element name="unifiVbattPotDivR1" psid="2165" -->
        <!-- Deleted: config_element name="unifiVbattPotDivR2" psid="2166" -->
        <!-- Deleted: config_element name="unifiVbattNumberOfSamples" psid="2167" -->
        <!-- Deleted: config_element name="unifiLclTxPowerPaCascLvl" psid="2370" -->
        <!-- Deleted: config_element name="unifiLclTxPowerMixGfine" psid="2371" -->
        <!-- Deleted: config_element name="unifiLclTxPowerMixFtrim" psid="2372" -->
        <!-- Deleted: config_element name="unifiLclTxPowerPaLevel" psid="2373" -->
        <!-- Deleted: config_element name="unifiLclTxPowerDacGain" psid="2374" -->
        <!-- Deleted: config_element name="unifiLclTxPowerMixGainSel" psid="2375" -->
        <!-- Deleted: config_element name="unifiLclTxPowerMixDrvGainSel" psid="2376" -->
        <!-- Deleted: config_element name="unifiDfyTransmitPowerCompensationFrequency" psid="2440" -->
        <!-- Deleted: config_element name="unifiDfyTransmitPowerCompensationTemperature" psid="2441" -->
        <!-- Deleted: config_element name="unifiDfyTransmitPowerCompensationTargetAdjustment" psid="2442" -->
        <!-- Deleted: config_element name="unifiDfyVbattTransmitPowerCompensationVbatt" psid="2443" -->
        <!-- Deleted: config_element name="unifiDfyVbattTransmitPowerCompensationTargetAdjustment" psid="2444" -->
        <!-- Deleted: config_element name="unifiDfyVbattTransmitPowerCompensationTxGain" psid="2445" -->
        <!-- Deleted: config_element name="unifiReceiveTriggerPulseOffset" psid="2615" -->
        <!-- Deleted: config_element name="unifiReceiveTriggerPulsePIO" psid="2614" -->
        <!-- Deleted: config_element name="unifiReceiveTriggerPulsePolarity" psid="2618" -->
        <!-- Deleted: config_element name="unifiReceiveTriggerPulseMaxLateness" psid="2617" -->
        <!-- Deleted: config_element name="unifiReceiveTriggerPulseDuration" psid="2616" -->
        <!-- Deleted: <config_element name="unifiAnaIOSettingEnum" psid="2148"> -->
        <!-- Deleted: <config_element name="unifiPrivateAnaIOSettingEnum" psid="4020"> -->
        <!-- Deleted: <config_element name="unifiCSROnlyPackagingVariant" psid="4021"> -->
        <!-- Deleted: <config_element name="unifiPrivateCSThresholdAdjust" psid="2363"> -->
        <!-- Deleted: <config_element name="unifiCoexScheme" psid="2300"> -->
        <!-- Deleted: <config_element name="unifiFrontEndControlConfigParam" psid="5021"> -->
        <!-- Deleted: <config_element name="unifiFrontEndControlMutex" psid="5024"> -->
        <!-- Deleted: <config_element name="unifiWapiSupported" psid="2039"> -->
        <!-- Deleted: <config_element name="unifiTxOOBConstraintRuleSelectorBitmask" psid="5039"> -->
        <!-- Deleted: <config_element name="unifiPioDirectionMask" psid="2101"> -->
        <!-- Deleted: <config_element name="unifiPioHostWakeMode" psid="2105"> -->
        <!-- Deleted: <config_element name="unifiPioHostWakeOutput" psid="2106"> -->
        <!-- Deleted: <config_element name="unifiPioHostWakePolarity" psid="2107"> -->
        <!-- Deleted: <config_element name="unifiPioHostWakePulseDuration" psid="2109"> -->
        <!-- Deleted: <config_element name="unifiPioHostWakeZeal" psid="2108"> -->
        <!-- Deleted: <config_element name="unifiPioLevelMask" psid="2102"> -->
        <!-- Deleted: <config_element name="unifiPioProtectMask" psid="2100"> -->
        <!-- Deleted: <config_element name="unifiTxRxTokenBalance" psid="4132"> -->

        <config_element name="dot11ACKFailureCount" psid="148">
            <description_user>This counter shall increment when an ACK is not received when expected.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>int64</type>
            <format>signed_decimal</format>
            <range_min>0</range_min>
            <range_max>4294967295</range_max>
            <function type="get" function_name="mibpktcntget" is_for_vif="true"></function>
        </config_element>
        <config_element name="dot11FCSErrorCount" psid="151">
            <description_user>This counter shall increment when an FCS error is detected in a received MPDU.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>int64</type>
            <format>signed_decimal</format>
            <range_max>4294967295</range_max>
            <function type="get" function_name="mibpktcntget" is_for_vif="true"></function>
        </config_element>
        <config_element name="dot11FragmentationThreshold" psid="124">
            <description_user>This attribute specifies the current maximum size, in octets, of the MPDU that may be delivered to the security encapsulation. This maximum size does not apply when an MSDU is transmitted using an HT-immediate or HTdelayed Block Ack agreement, or when an MSDU or MMPDU is carried in an AMPDU that does not contain a VHT single MPDU. Fields added to the frame by security encapsulation are not counted against the limit specified by this attribute. Except as described above, an MSDU or MMPDU is fragmented when the resulting frame has an individual address in the Address1 field, and the length of the frame is larger than this threshold, excluding security encapsulation fields. The default value for this attribute is the lesser of 11500 or the aMPDUMaxLength or the aPSDUMaxLength of the attached PHY and the value never exceeds the lesser of 11500 or the aMPDUMaxLength or the aPSDUMaxLength of the attached PHY.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <range_min>256</range_min>
            <range_max>11500</range_max>
            <default>3000</default>
            <function_list>
                <function type="get" function_name="mibuint16get" is_for_vif="true"></function>
                <function type="set" function_name="mibuint16set" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="dot11LongRetryLimit" psid="123">
            <description_user>This attribute shall indicate the maximum number of transmission attempts of a frame, the length of which is greater than dot11RTSThreshold, that shall be made before a failure condition is indicated.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <range_min>1</range_min>
            <range_max>255</range_max>
            <default>4</default>
            <function_list>
                <function type="get" function_name="mibuint16get" is_for_vif="true"></function>
                <function type="set" function_name="mibuint16set" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="dot11MulticastReceivedFrameCount" psid="150">
            <description_user>This counter shall increment when a MSDU is received with the multicast bit set in the destination MAC address.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>int64</type>
            <format>signed_decimal</format>
            <range_min>0</range_min>
            <range_max>4294967295</range_max>
            <function type="get" function_name="mibpktcntget" is_for_vif="true"></function>
        </config_element>
        <config_element name="dot11PowerCapabilityMaxImplemented" psid="112">
            <description_user>This attribute indicates the maximum transmit Power Capability of this station at the antenna port.  Values are expressed in 0.25 dBm units.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>int16</type>
            <format>signed_decimal</format>
            <units>qdBm</units>
            <function type="get" function_name="mibmaxpowerget"></function>
        </config_element>
        <config_element name="dot11PowerCapabilityMinImplemented" psid="113">
            <description_user>This attribute indicates the minimum transmit Power Capability of this station at the antenna port. Values are expressed in 0.25 dBm units.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>int16</type>
            <format>signed_decimal</format>
            <units>qdBm</units>
            <function type="get" function_name="mibminpowerget"></function>
        </config_element>
        <config_element name="dot11RSNAStatsCCMPDecryptErrors" psid="437">
            <description_user>The number of received MPDUs discarded by the CCMP decryption algorithm.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>int64</type>
            <format>signed_decimal</format>
            <range_min>0</range_min>
            <range_max>4294967295</range_max>
            <table_name>dot11RSNAStatsTable</table_name>
            <function type="get" function_name="mibrsnastatsget"></function>
        </config_element>
        <config_element name="dot11RSNAStatsCCMPReplays" psid="436">
            <description_user>The number of received CCMP MPDUs discarded by the replay mechanism.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>int64</type>
            <format>signed_decimal</format>
            <range_min>0</range_min>
            <range_max>4294967295</range_max>
            <table_name>dot11RSNAStatsTable</table_name>
            <function type="get" function_name="mibrsnastatsget"></function>
        </config_element>
        <config_element name="dot11RSNAStatsRobustMgmtCCMPReplays" psid="441">
            <description_user>The number of received Robust Management frame MPDUs discarded due to CCMP replay errors
            </description_user>
            <access_rights>read_only</access_rights>
            <type>int64</type>
            <format>signed_decimal</format>
            <range_min>0</range_min>
            <range_max>4294967295</range_max>
            <table_name>dot11RSNAStatsTable</table_name>
            <function type="get" function_name="mibrsnastatsget"></function>
        </config_element>
        <config_element name="dot11RSNAStatsSTAAddress" psid="430">
            <description_user>The MAC address of the STA to which the statistics in this conceptual row belong.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>octet_string</type>
            <format>mac_addr</format>
            <table_name>dot11RSNAStatsTable</table_name>
            <function type="get" function_name="mibrsnastatsget"></function>
        </config_element>
        <config_element name="dot11RSNAStatsTKIPICVErrors" psid="433">
            <description_user>Counts the number of TKIP ICV errors encountered when decrypting packets for the STA.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>int64</type>
            <format>signed_decimal</format>
            <range_min>0</range_min>
            <range_max>4294967295</range_max>
            <table_name>dot11RSNAStatsTable</table_name>
            <function type="get" function_name="mibrsnastatsget"></function>
        </config_element>
        <config_element name="dot11RSNAStatsTKIPLocalMICFailures" psid="434">
            <description_user>Counts the number of MIC failures encountered when checking the integrity of packets received from the STA at this entity.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>int64</type>
            <format>signed_decimal</format>
            <range_min>0</range_min>
            <range_max>4294967295</range_max>
            <table_name>dot11RSNAStatsTable</table_name>
            <function type="get" function_name="mibrsnastatsget"></function>
        </config_element>
        <config_element name="dot11RSNAStatsTKIPRemoteMICFailures" psid="435">
            <description_user>Counts the number of MIC failures encountered by the STA identified by dot11RSNAStatsSTAAddress and reported back to this entity.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>int64</type>
            <format>signed_decimal</format>
            <range_min>0</range_min>
            <range_max>4294967295</range_max>
            <table_name>dot11RSNAStatsTable</table_name>
            <function type="get" function_name="mibrsnastatsget"></function>
        </config_element>
        <config_element name="dot11RSNAStatsTKIPReplays" psid="438">
            <description_user>Counts the number of TKIP replay errors detected.</description_user>
            <access_rights>read_only</access_rights>
            <type>int64</type>
            <format>signed_decimal</format>
            <range_min>0</range_min>
            <range_max>4294967295</range_max>
            <table_name>dot11RSNAStatsTable</table_name>
            <function type="get" function_name="mibrsnastatsget"></function>
        </config_element>
        <config_element name="dot11RTSSuccessCount" psid="146">
            <description_user>This counter shall increment when a CTS is received in response to an RTS.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>int64</type>
            <format>signed_decimal</format>
            <range_min>0</range_min>
            <range_max>4294967295</range_max>
            <function type="get" function_name="mibpktcntget" is_for_vif="true"></function>
        </config_element>
        <config_element name="dot11RTSThreshold" psid="121">
            <description_user>This attribute shall indicate the size of an MPDU, below which an RTS/CTS handshake shall not be performed, except as RTS/CTS is used as a cross modulation protection mechanism as defined in 9.10. An RTS/CTS handshake shall be performed at the beginning of any frame exchange sequence where the MPDU is of type Data or Management, the MPDU has an individual address in the Address1 field, and the length of the MPDU is greater than this threshold. (For additional details, refer to Table 21 in 9.7.) Setting this attribute to be larger than the maximum MSDU size shall have the effect of turning off the RTS/CTS handshake for frames of Data or Management type transmitted by this STA. Setting this attribute to zero shall have the effect of turning on the RTS/CTS handshake for all frames of Data or Management type transmitted by this STA.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <units>octet</units>
            <format>unsigned_decimal</format>
            <range_min>0</range_min>
            <range_max>65536</range_max>
            <default>9000</default>
            <function_list>
                <function type="get" function_name="mibuint16get" is_for_vif="true"></function>
                <function type="set" function_name="mibuint16set" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="dot11ShortRetryLimit" psid="122">
            <description_user>This attribute shall indicate the maximum number of transmission attempts of a frame, the length of which is less than or equal to dot11RTSThreshold, that shall be made before a failure condition is indicated.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <range_min>1</range_min>
            <range_max>255</range_max>
            <default>15</default>
            <function_list>
                <function type="get" function_name="mibuint16get" is_for_vif="true"></function>
                <function type="set" function_name="mibuint16set" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="dot11WEPUndecryptableCount" psid="153">
            <description_user>This counter shall increment when a frame is received with the WEP subfield of the Frame Control field set to one and the WEPOn value for the key mapped to the transmitter&apos;s MAC address indicates that the frame should not have been encrypted or that frame is discarded due to the receiving STA not implementing the privacy option.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>int64</type>
            <format>signed_decimal</format>
            <range_min>0</range_min>
            <range_max>4294967295</range_max>
            <function type="get" function_name="mibpktcntget" is_for_vif="true"></function>
        </config_element>
        <config_element name="dot11manufacturerProductVersion" psid="183">
            <description_user>Printable string used to identify the manufacturer&apos;s product version of the resource.
            </description_user>
            <description_internal>This string is generated automatically by the build process. It contains the time and date that the build was made, the release configuration used (which itself incorporates the target chip family and variant, whether it is a flash or RAM build, and the host interface), the unique build number, and details of the user account and machine used to produce the build.
            </description_internal>
            <access_rights>read_only</access_rights>
            <type>octet_string</type>
            <format>unicode_string</format>
            <range_min>0</range_min>
            <range_max>400</range_max>
            <function type="get" function_name="mibgetfirmwareproductversion"></function>
        </config_element>
        <config_element name="dot11AssociationSAQueryMaximumTimeout" psid="100">
            <description_user>This attribute specifies the number of time units (TUs) that an AP can wait, from the scheduling of the first SA Query Request to allow association process to be started without starting additional SA Query procedure if a successful SA Query Response is not received.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint32</type>
            <units>TU</units>
            <format>unsigned_decimal</format>
            <range_min>0</range_min>
            <range_max>4294967295</range_max>
            <default>1000</default>
        </config_element>
        <config_element name="dot11AssociationSAQueryRetryTimeout" psid="101">
            <description_user>This attribute specifies the number of time units (TUs) that an AP waits between issuing two subsequent SA Query Request frames.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint32</type>
            <units>TU</units>
            <format>unsigned_decimal</format>
            <range_min>1</range_min>
            <range_max>4294967295</range_max>
            <default>201</default>
        </config_element>
        <config_element name="unifiAPSDServicePeriodTimeout" psid="2515">
            <description_user> During Unscheduled Automated Power Save Delivery (U-APSD), UniFi may trigger a service period in order to fetch data from the access point. The service period is normally terminated by a frame from the access point with the EOSP (End Of Service Period) flag set, at which point UniFi returns to sleep. However, if the access point is temporarily inaccessible, UniFi would stay awake indefinitely. This attribute specifies a timeout starting from the point where the trigger frame has been sent. If the timeout expires and no data has been received from the access point, UniFi will behave as if the service period had been ended normally and return to sleep. This timeout takes precedence over unifiPowerSaveExtraListenTime if both would otherwise be applicable.
            </description_user>
            <units>&#x00b5;s</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>20000</default>
            <function_list>
                <function type="get" function_name="mibuint16get" is_for_vif="true"></function>
                <function type="set" function_name="mibuint16set" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiLegacyPsPollTimeout" psid="2520">
            <description_user> Time we try to stay awake after sending a PS-POLL to receive data.
            </description_user>
            <units>&#x00b5;s</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>15000</default>
            <function_list>
                <function type="get" function_name="mibuint16get" is_for_vif="true"></function>
                <function type="set" function_name="mibuint16set" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiBasicCapabilities" psid="2030">
            <description_user>This MIB variable indicates basis capabilities of the chip. The 16-bit field follows the coding of IEEE 802.11 Capability Information.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>hexadecimal</format>
            <range_min>0</range_min>
            <range_max>65535</range_max>
            <default>0x0730</default>
        </config_element>
        <config_element name="unifiUserSetTxpowerLevel" psid="6021">
            <description_user> Maximum air power for the VIF, set by the user. Values are expressed in 0.25 dBm units.
            </description_user>
            <access_rights>read_write</access_rights>
            <range_min>0</range_min>
            <range_max>127</range_max>
            <default>127</default>
            <type>int16</type>
            <format>signed_decimal</format>
            <units>qdBm</units>
            <function_list>
                <function type="set" function_name="mlmeusersettxpowerlevel"></function>
            </function_list>
       </config_element>
       <config_element name="unifiTPCMaxPowerRSSIThreshold" psid="6022">
            <description_user>  Below this  RSSI(dBm) threshold, firmware will switch to max power allowed by current regulatory.
            If it has been previously reduced due to unifiTPCMinPowerRSSIThreshold.
            Applies to VIF of type STA (including P2P Client)
            </description_user>
            <access_rights>read_write</access_rights>
            <default>-55</default>
            <type>int16</type>
            <format>signed_decimal</format>
        </config_element>
        <config_element name="unifiTPCMinPowerRSSIThreshold" psid="6023">
            <description_user> Above this RSSI(dBm) threshold, firmware will switch to minimum power that our hardware can support - provided it is lower than current regulatory limit.
            Setting it to zero disables the MIB and revert the power to default state (as specified by regulatory).
            Applies to VIF of type STA (including P2P Client)
            </description_user>
            <access_rights>read_write</access_rights>
            <default>-45</default>
            <type>int16</type>
            <format>signed_decimal</format>
        </config_element>
        <config_element name="unifiTPCMinPower2G" psid="6024">
            <description_user> Minimun power to use at 2.4GHz interface when RSSI is above unifiTPCMinPowerRSSIThreshold.
            Specified in quarter dbm. Its value should be higher than  dot11PowerCapabilityMinImplemented.
            Applies to VIF of type STA (including P2P Client)
            </description_user>
            <access_rights>read_write</access_rights>
            <default>52</default>
            <type>int16</type>
            <format>signed_decimal</format>
        </config_element>
        <config_element name="unifiTPCMinPower5G" psid="6025">
            <description_user> Minimun power to use at 5 GHz interface when RSSI is above unifiTPCMinPowerRSSIThreshold.
            Specified in quarter dbm. Its value should be higher than  dot11PowerCapabilityMinImplemented
            Applies to VIF of type STA (including P2P Client)
            </description_user>
            <access_rights>read_write</access_rights>
            <default>40</default>
            <type>int16</type>
            <format>signed_decimal</format>
        </config_element>
        <!-- Index -->
        <config_element name="unifiSarBackoffTableIndex" psid="0">
          <type>integer</type>
          <range_min>1</range_min>
          <range_max>4</range_max>
          <description_user>Index for unifiSarBackoffTable. Indexed by the modulation:
            Index 1: 11b
            Index 2: 11g
            Index 3: 11n
            Index 4: 11ac
          </description_user>
        </config_element>
        <!-- Columns -->
        <config_element name="unifiSarBackoff" psid="6026">
          <description_user> SAR backoff values in 1/4 dBm. </description_user>
          <access_rights>read_write</access_rights>
          <type>int16</type>
          <range_min>0</range_min>
          <range_max>100</range_max>
          <table_name>unifiSarBackoffTable</table_name>
          <default_list>
            <!-- 802.11b  -->
            <default index1="1"> 80 </default>
            <!-- 802.11g  -->
            <default index1="2"> 80 </default>
            <!-- 802.11n  -->
            <default index1="3"> 80 </default>
            <!-- 802.11ac -->
            <default index1="4"> 80 </default>
          </default_list>
        </config_element>
        <config_element name="unifiSarBackoffEnable" psid="6027">
            <description_user> SAR Backoff feature hook.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <format>unsigned_decimal</format>
            <function_list>
                <function type="set" function_name="mibsarbackoffenableset" is_for_vif="false"></function>
                <function type="get" function_name="mibsarbackoffenableget" is_for_vif="false"></function>
            </function_list>
        </config_element>
        <config_element name="unifiPrivateBbbTxFilterConfig" psid="4071">
            <description_user>This MIB entry is written directly to the BBB_TX_FILTER_CONFIG register. Only the lower eight bits of this register are implemented . Bits 0-3 are the &apos;Tx Gain&apos;, bits 6-8 are the &apos;Tx Delay&apos;. This register should only be changed by an expert.
            </description_user>
            <is_internal>true</is_internal>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>hexadecimal</format>
            <default>0x17</default>
        </config_element>
        <config_element name="unifiCSROnlyWapiQosMask" psid="4130">
            <description_user>This value forces the WAPI encryption hardware use the QoS mask specified by Host.</description_user>
            <is_internal>true</is_internal>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <range_min>0</range_min>
            <range_max>65535</range_max>
            <default>15</default>
            <function_list>
                <function type="get" function_name="mibuint16get"></function>
                <function type="set" function_name="mibuint16set"></function>
            </function_list>
        </config_element>
        <config_element name="unifiCSROnlyMIBShield" psid="4001">
            <description_user>Each element of the MIB has a set of read/write access constraints that may be applied when the element is accessed by the host. For most elements the constants are derived from their MAX-ACCESS clauses. unifiCSROnlyMIBShield controls the access mechanism. If this entry is set to &apos;warn&apos;, when the host makes an inappropriate access to a MIB variable (e.g., writing to a &apos;read-only&apos; entry) then the firmware attempts to send a warning message to the host, but access is allowed to the MIB variable. If this entry is set to &apos;guard&apos; then inappropriate accesses from the host are prevented. If this entry is set to &apos;alarm&apos; then inappropriate accesses from the host are prevented and the firmware attempts to send warning messages to the host. If this entry is set to &apos;open&apos; then no access constraints are applied and now warnings issued. Note that certain MIB entries have further protection schemes. In particular, the
                MIB prevents the host from reading some security keys (WEP keys, etc.).
            </description_user>
            <is_internal>true</is_internal>
            <access_rights>not_accessible</access_rights>
            <type>unifiCSROnlyMIBShield</type>
            <format>unsigned_decimal</format>
            <default>2</default>
        </config_element>
        <config_element name="unifiCSROnlyPsPollThreshold" psid="4179">
            <access_rights>read_write</access_rights>
            <range_max>65535</range_max>
            <type>uint16</type>
            <description_user>This variable specifies PS Poll threshold. When Unifi chip is configured for normal power save mode and when access point does not respond to PS-Poll requests,then a fault will be generated on non-zero PS Poll threshold indicating mode has been switched from power save to fast power save. Ignored PS Poll count is given as the fault argument.
            </description_user>
            <default>30</default>
            <function_list>
                <function type="get" function_name="mibuint16get" is_for_vif="true"></function>
                <function type="set" function_name="mibuint16set" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiCSROnlyPatchIntFunction" psid="4181">
            <description_user>The values stored in unifiCSROnlyPatchTable.</description_user>
            <access_rights>read_write</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <table_name>unifiCSROnlyPatchTable</table_name>
            <function_list>
                <function type="get" function_name="mibpatchintget"></function>
                <function type="set" function_name="mibpatchintset"></function>
            </function_list>
        </config_element>
        <config_element name="unifiCSROnlyPatchIntValue" psid="4180">
            <description_user>The values stored in unifiCSROnlyPatchTable.</description_user>
            <access_rights>read_write</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <table_name>unifiCSROnlyPatchTable</table_name>
        </config_element>
        <config_element name="unifiCSROnlyPatchStringFunction" psid="4183">
            <description_user>The values stored in unifiCSROnlyPatchTable.</description_user>
            <access_rights>read_write</access_rights>
            <type>octet_string</type>
            <table_name>unifiCSROnlyPatchTable</table_name>
            <function_list>
                <function type="get" function_name="mibpatchstringget"></function>
                <function type="set" function_name="mibpatchstringset"></function>
            </function_list>
        </config_element>
        <config_element name="unifiCSROnlyPatchStringValue" psid="4182">
            <description_user>The values stored in unifiCSROnlyPatchTable.</description_user>
            <access_rights>read_write</access_rights>
            <type>octet_string</type>
            <table_name>unifiCSROnlyPatchTable</table_name>
        </config_element>
        <config_element name="unifiCSROnlyPostEBRTWindow" psid="4173">
            <description_user>This value specifies the minimum time after the expected beacon reception time that UniFi will continue to listen for the beacon in an infrastructure BSS before timing out. Reducing this value can reduce UniFi power consumption when using low power modes, however a value which is too small may cause beacons to be missed, requiring the radio to remain on for longer periods to ensure reception of the subsequent beacon.
            </description_user>
            <is_internal>true</is_internal>
            <units>&#x00b5;s</units>
            <access_rights>read_only</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <range_max>2147483647</range_max>
            <default>2000</default>
            <function_list>
                <function type="get" function_name="mibuint32get" is_for_vif="true"></function>
                <function type="set" function_name="mibuint32set" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiCSROnlyPowerCalDelay" psid="4078">
            <description_user>Delay applied at each step of the power calibration routine used with an external PA.
            </description_user>
            <is_internal>true</is_internal>
            <units>&#x00b5;s</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>0</default>
        </config_element>
        <config_element name="unifiCSROnlyPreEBRTWindow" psid="4171">
            <description_user>This value specifies the latest time before the expected beacon reception time that UniFi will turn on its radio in order to receive the beacon. Reducing this value can reduce UniFi power consumption when using low power modes, however a value which is too small may cause beacons to be missed, requiring the radio to remain on for longer periods to ensure reception of the subsequent beacon.
            </description_user>
            <is_internal>true</is_internal>
            <units>&#x00b5;s</units>
            <access_rights>read_only</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <range_max>2147483647</range_max>
            <default>100</default>
            <function_list>
                <function type="get" function_name="mibuint32get" is_for_vif="true"></function>
                <function type="set" function_name="mibuint32set" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiCSROnlyRawDataMemoryValue" psid="4300">
            <description_user>The value of the word in MAC data memory at the address specified by unifiCSROnlyRawDataMemoryIndex, which may or may not be the address of a register.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <table_name>unifiCSROnlyRawDataMemoryTable</table_name>
            <function type="get" function_name="mibrawregtabget"></function>
        </config_element>
        <config_element name="unifiCSROnlyRawRegisterAddress" psid="4121">
            <description_user>The (word) address of the register to modify.</description_user>
            <is_internal>true</is_internal>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <table_name>unifiCSROnlyRawRegistersTable</table_name>
        </config_element>
        <config_element name="unifiCSROnlyRawRegisterFlags" psid="4120">
            <description_user>A bitmask of flags controlling when this register should be modified. This should be a combination of the following values: 0x0001 - Write individual register when RowStatus set to active. The other registers within this table are not written, and no protection is applied against simultaneous access to the register from other parts of the firmware. Use carefully! 0x0002 - Write registers on receipt of the first MLME-RESET.request (used to mark the MIB as initialised), prior to performing the initial radio calibration. 0x0004 - Write registers after processing any MLME-RESET.request. 0x0008 - Write registers after switching radio channel.
            </description_user>
            <is_internal>true</is_internal>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <range_max>15</range_max>
            <table_name>unifiCSROnlyRawRegistersTable</table_name>
        </config_element>
        <config_element name="unifiCSROnlyRawRegisterMask" psid="4122">
            <description_user>Bit mask of register bits to modify.</description_user>
            <is_internal>true</is_internal>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <table_name>unifiCSROnlyRawRegistersTable</table_name>
        </config_element>
        <config_element name="unifiCSROnlyRawRegisterStatus" psid="4124">
            <description_user>The status column used for creating, modifying, and deleting instances of the columnar objects in the raw register writes table.
            </description_user>
            <is_internal>true</is_internal>
            <access_rights>read_write</access_rights>
            <type>unifiCSROnlyRawRegisterStatus</type>
            <format>signed_decimal</format>
            <table_name>unifiCSROnlyRawRegistersTable</table_name>
        </config_element>
        <config_element name="unifiCSROnlyRawRegisterValue" psid="4123">
            <description_user>The value to write to the register. Only bits set in the corresponding unifiCSROnlyRawRegisterMask are modified.
            </description_user>
            <is_internal>true</is_internal>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <table_name>unifiCSROnlyRawRegistersTable</table_name>
        </config_element>
        <config_element name="unifiPrivateSWAGCExtThresh" psid="4077">
            <description_user>Signal level at which external LNA will be used for AGC purposes.</description_user>
            <is_internal>true</is_internal>
            <access_rights>read_write</access_rights>
            <type>int16</type>
            <format>signed_decimal</format>
            <range_min>-128</range_min>
            <range_max>127</range_max>
            <default>-25</default>
        </config_element>
        <config_element name="unifiPrivateSWAGCFrontEndGain" psid="4075">
            <description_user>Gain of the path between chip and antenna when LNA is on.</description_user>
            <is_internal>true</is_internal>
            <access_rights>read_write</access_rights>
            <type>int16</type>
            <format>signed_decimal</format>
            <range_min>-128</range_min>
            <range_max>127</range_max>
            <default>0</default>
        </config_element>
        <config_element name="unifiPrivateSWAGCFrontEndLoss" psid="4076">
            <description_user>Loss of the path between chip and antenna when LNA is off.</description_user>
            <is_internal>true</is_internal>
            <access_rights>read_write</access_rights>
            <type>int16</type>
            <format>signed_decimal</format>
            <range_min>-128</range_min>
            <range_max>127</range_max>
            <default>0</default>
        </config_element>
        <config_element name="unifiChipVersion" psid="2022">
            <description_user>Numeric identifier for the UniFi silicon revision (as returned by the GBL_CHIP_VERSION hardware register). Other than being different for each design variant (but not for alternative packaging options), the particular values returned do not have any significance.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
        </config_element>
        <config_element name="unifiClockFrequency" psid="2140">
            <description_user>This attribute can be used to query the nominal frequency of the external clock source or crystal oscillator used by UniFi. The clock frequency is a system parameter and can not be modified by this MIB key.
            </description_user>
            <units>kHz</units>
            <access_rights>read_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <function_list>
                <function type="get" function_name="mibclockfrequencyget"></function>
            </function_list>
        </config_element>
        <config_element name="unifiCrystalFrequencyTrim" psid="2141">
            <description_user>The IEEE 802.11 standard requires a frequency accuracy of either +/- 20 ppm or +/- 25 ppm depending on the physical layer being used. If UniFi&apos;s frequency reference is a crystal then this attribute should be used to tweak the oscillating frequency to compensate for design- or device-specific variations. Each step change trims the frequency by approximately 2 ppm.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <range_max>63</range_max>
            <default>31</default>
        </config_element>
        <config_element name="unifiDTIMWaitTimeout" psid="2529">
            <description_user>If UniFi is in power save and receives a Traffic Indication Map from its associated access point with a DTIM indication, it will wait a maximum time given by this attribute for succeeding broadcast or multicast traffic, or until it receives such traffic with the &apos;more data&apos; flag clear. Any reception of broadcast or multicast traffic with the &apos;more data&apos; flag set, or any reception of unicast data, resets the timeout. The timeout can be turned off by setting the value to zero; in that case UniFi will remain awake indefinitely waiting for broadcast or multicast data. Otherwise, the value should be larger than that of unifiPowerSaveExtraListenTime.
            </description_user>
            <units>&#x00b5;s</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>50000</default>
        </config_element>
        <config_element name="unifiEnableDorm" psid="2142">
            <description_user>Dorm/deep sleep can be permanently disallowed by setting the value to FALSE. When the value is FALSE, WLAN will not switch the radio power domain on/off *and* it will always veto deep sleep. Setting the value to TRUE means dorm functionality will behave normally. The intention is *not* for this value to be changed at runtime.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <format>unsigned_decimal</format>
            <default>true</default>
        </config_element>
        <config_element name="unifiTogglePowerDomain" psid="2522">
            <description_user>Toggle WLAN power domain when entering dorm mode (deep sleep). When entering deep sleep and this value it true, then the WLAN power domain is disabled for the deep sleep duration. When false, the power domain is left turned on. This is to work around issues with WLAN rx, and is considered temporary until the root cause is found and fixed.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <format>unsigned_decimal</format>
            <default>false</default>
        </config_element>
        <config_element name="unifiDisableDormWhenBtOn" psid="2143">
            <description_user>Dorm/deep sleep would be dynamically disabled when BT is turned ON if the value is TRUE, even though unifiEnableDorm is TRUE. For more details, take a look at SSB-17864.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <format>unsigned_decimal</format>
            <default>false</default>
        </config_element>
        <config_element name="unifiDiscardedFrameCount" psid="2214">
            <description_user>This is a counter that indicates the number of data and management frames that have been processed by the UniFi hardware but were discarded before being processed by the firmware. It does not include frames not processed by the hardware because they were not addressed to the local device, nor does it include frames discarded by the firmware in the course of normal MAC processing (which include, for example, frames in an appropriate encryption state and multicast frames not requested by the host). Typically this counter indicates lost data frames for which there was no buffer space; however, other cases may cause the counter to increment, such as receiving a retransmitted frame that was already successfully processed. Hence this counter should not be treated as a reliable guide to lost frames. The counter wraps to 0 after 65535.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <function_list>
                <function type="get" function_name="mibpktcntget" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiCurrentTSFTime" psid="2218">
            <description_user>Get TSF time (last 32 bits) for the specified VIF. VIF index can't be 0 as that is treated as global VIF For station VIF - Correct BSS TSF wil only be reported after MLME-CONNECT.indication(success) indication to host. Note that if MAC Hardware is switched off then TSF returned is estimated value
            </description_user>
            <access_rights>read_only</access_rights>
            <type>int64</type>
            <format>signed_decimal</format>
            <function_list>
                <function type="get" function_name="mibtsftime" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiExtendedCapabilities" psid="2031">
            <description_user>This MIB variable indicates extended capabilities of the chip. Bit field definition and coding follows IEEE 802.11 Extended Capability Information Element, with spare subfields for capabilities that are independent from chip/firmware implementation.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>octet_string</type>
            <range_min>9</range_min>
            <range_max>9</range_max>
            <default>{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }</default>
        </config_element>
        <config_element name="unifiExternalClockDetect" psid="2146">
            <description_user>If UniFi is running with an external fast clock source, i.e. unifiExternalFastClockRequest is set, it is common for this clock to be shared with other devices. Setting this attribute to true causes UniFi to detect when the clock is present (presumably in response to a request from another device), and to perform any pending activities at that time rather than requesting the clock again some time later. This is likely to reduce overall system power consumption by reducing the total time that the clock needs to be active.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>boolean</type>
            <format>signed_decimal</format>
            <default>false</default>
        </config_element>
        <config_element name="unifiExternalFastClockRequest" psid="2149">
            <description_user>It is possible to supply UniFi with an external fast reference clock, as an alternative to using a crystal. If such a clock is used then it is only required when UniFi is active. A signal can be output on PIO[2] or if the version of UniFi in use is the UF602x or later, any PIO may be used (see unifiExternalFastClockRequestPIO) to indicate when UniFi requires a fast clock. Setting this attribute makes this signal become active and determines the type of signal output. 0 - No clock request. 1 - Non inverted, totem pole. 2 - Inverted, totem pole. 3 - Open drain. 4 - Open source.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>unifiExternalFastClockRequest</type>
            <format>unsigned_decimal</format>
            <default>1</default>
        </config_element>
        <config_element name="unifiExternalFastClockRequestPIO" psid="2158">
            <description_user>If an external fast reference clock is being supplied to UniFi as an alternative to a crystal (see unifiExternalFastClockRequest) and the version of UniFi in use is the UF602x or later, any PIO may be used as the external fast clock request output from UniFi. This MIB key determines the PIO to use.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <range_max>15</range_max>
            <default>9</default>
        </config_element>
        <config_element name="unifiFastPowerSaveTimeout" psid="2500">
            <description_user>UniFi implements a proprietary power management mode called Fast Power Save that balances network performance against power consumption. In this mode UniFi delays entering power save mode until it detects that there has been no exchange of data for the duration specified in usec by this attribute.
            </description_user>
            <units>&#x00b5;s</units>
            <access_rights>read_only</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <range_max>2147483647</range_max>
            <default>400000</default>
        </config_element>
        <config_element name="unifiRameDplaneOperationTimeout" psid="2544">
            <description_user>Timeout for requests sent from MACRAME to Data Plane. Any value below 1000ms will be capped at 1000ms.
            </description_user>
            <units>milliseconds</units>
            <access_rights>read_only</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <default>1000</default>
        </config_element>
        <config_element name="unifiVifIdleMonitorTime" psid="2509">
            <description_user>In Fast Power Save mode, the STA will decide whether it is idle based on monitoring its traffic class. If the traffic class is continuously "occasional" for equal or longer than this MIB value (specified in seconds), then the VIF is marked as idle. Traffic class monitoring is based on the interval specified in the "unifiExitPowerSavePeriod" MIB
            </description_user>
            <units>s</units>
            <access_rights>read_only</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <range_max>1800</range_max>
            <default>5</default>
        </config_element>
        <config_element name="unifiFirmwareBuildID" psid="2021">
            <description_user>Numeric build identifier for this firmware build. This should normally be displayed in decimal. The textual build identifier is available via the standard dot11manufacturerProductVersion MIB attribute.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <function type="get" function_name="mibgetfirmwarebuildid"></function>
        </config_element>
        <config_element name="unifiFirmwarePatchBuildID" psid="2023">
            <description_user>Numeric build identifier for the patch set that has been applied to this firmware image. This should normally be displayed in decimal. For a patched ROM build there will be two build identifiers, the first will correspond to the base ROM image, the second will correspond to the patch set that has been applied.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <function type="get" function_name="mibgetfirmwarebuildid"></function>
        </config_element>
        <config_element name="unifiPeerAverageTxDataRate" psid="2096">
            <description_user> The average tx rate that are used for transmissions since this entry was last read; </description_user>
            <description_internal>Rate is read from station records of peer station</description_internal>
            <access_rights>read_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <table_name>unifiPeerIdTable</table_name>
            <function_list>
                <function type="get" function_name="mibpeertxdatarateget" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiIBSSBeaconRateStart" psid="2215">
            <description_user>In Oxygen it is required that in the first X seconds after joining an IBSS at least Y beacons must be transmitted. With this MIB it is possible to set the number of seconds X and the number of beacons Y where the most significant 16 bits is the number of seconds and the least significant 16 bits is the number of beacons. If seconds or beacons is zero the feature is disabled.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint32</type>
            <format>hexadecimal</format>
            <default>0x0005000A</default>
            <function_list>
                <function type="get" function_name="mibuint32get" is_for_vif="true"></function>
                <function type="set" function_name="mibuint32set" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiIBSSBeaconRateOnGoing" psid="2216">
            <description_user>In Oxygen it is required that after the first N seconds which can be set by unifiIBSSBeaconRateStart at least Y beacons must be transmitted for every X seconds. With this MIB it is possible to set the number of seconds X and the number of beacons Y where the most significant 16 bits is the number of seconds and the least significant 16 bits is the number of beacons. If seconds or beacons is zero the feature is disabled.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint32</type>
            <format>hexadecimal</format>
            <default>0x000A0001</default>
            <function_list>
                <function type="get" function_name="mibuint32get" is_for_vif="true"></function>
                <function type="set" function_name="mibuint32set" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiReceiverLeaderTimeout" psid="2217">
            <description_user>This attribute shall indicate the maximum number of seconds during which the leader has not received any action frames from the multicast transmitter before leader think the multicaster has cancelled its leader relation. After timer triggers TIMEOUT, FW shall cancel and unconfigure the HW
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>8</default>
            <function_list>
                <function type="get" function_name="mibuint16get" is_for_vif="true"></function>
                <function type="set" function_name="mibuint16set" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiTxFailureThreshold" psid="2219">
            <description_user>For Oxygen Fast TX Failure Event Notification. This value is the number of consecutive transmission failures for a peer device before the notification event is sent to host. value set to 0 disables this functionality
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>0</default>
            <function_list>
                <function type="set" function_name="mibuint16set" is_for_vif="true"></function>
                <function type="get" function_name="mibuint16get" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiRMCFailureThreshold" psid="2222">
            <description_user>This value is the number of consecutive RMC transmission failures triggering the reselection of the RMC Receiver Leader. value set to 0 disables this functionality.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>3</default>
            <function_list>
                <function type="set" function_name="mibuint16set" is_for_vif="true"></function>
                <function type="get" function_name="mibuint16get" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiIbssShortRetryLimit" psid="2223">
            <description_user>This attribute indicates the maximum number of transmission attempts of a frame whose length is less than or equal to dot11RTSThreshold, that shall be made in an IBSS before a failure condition is indicated.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <range_min>1</range_min>
            <range_max>255</range_max>
            <default>7</default>
            <function_list>
                <function type="get" function_name="mibuint16get" is_for_vif="true"></function>
                <function type="set" function_name="mibuint16set" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiIbssLongRetryLimit" psid="2224">
            <description_user>This attribute indicates the maximum number of transmission attempts of a frame whose length is greater than dot11RTSThreshold, that shall be made in an IBSS before a failure condition is indicated.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <range_min>1</range_min>
            <range_max>255</range_max>
            <default>4</default>
            <function_list>
                <function type="get" function_name="mibuint16get" is_for_vif="true"></function>
                <function type="set" function_name="mibuint16set" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiDisallowSchedRelinquish" psid="2543">
            <description_user> When this value is set to TRUE, the VIFs will not relinquish their assigned schedules when they have nothing left to do.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <format>signed_decimal</format>
            <default>false</default>
        </config_element>
        <config_element name="unifiSTAKeepAlivePeriod" psid="2502">
            <description_user> Station/P2P Client Mode: This variable specifies the interval between sending keep-alive (Null frame) packets while associated to an access point during periods of idleness (i.e. when there is no unicast transmit or receive activity).Setting it to 0 Disables it. This MIB should be set before the VIF is created. If set to less than 10s (but not 0) it defaults to 10.
            </description_user>
            <units>s</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>30</default>
            <range_max>2147</range_max>
        </config_element>
        <config_element name="unifiAPKeepAlivePeriod" psid="2503">
            <description_user> Ap Mode:This variable specifies the interval between sending keep-alive (Null frame) packetsto associated stations if there has been no unicast Rx/Tx activities.Setting it to 0 Disables it. This MIB should be set before the VIF is created. Min value when different to 0 is 10s.
            </description_user>
            <units>s</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>10</default>
            <range_max>2147</range_max>
        </config_element>
        <config_element name="unifiGOKeepAlivePeriod" psid="2504">
            <description_user> P2P GO Mode:This variable specifies the interval between sending keep-alive (Null frame) packetsto associated P2P Clients if there has been no unicast Rx/Tx activities. Setting it to 0 Disables it.This MIB should be set before the VIF is created. min value when different to 0 is 10s.
            </description_user>
            <units>s</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>10</default>
            <range_max>2147</range_max>
        </config_element>
        <config_element name="unifiIBSSKeepAlivePeriod" psid="2501">
            <description_user> AdHoc/IBSS/Oxygen Mode: This variable specifies the interval between sending keep-alive (Null frame) packets to associated station in an Ad Hoc network if there has been no unicast Rx/Tx activities. Setting it to 0 Disables it. This MIB should be set before the VIF is created. If set to less than 10s (but not 0) it defaults to 10.
            </description_user>
            <units>s</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>10</default>
            <range_max>2147</range_max>
        </config_element>
        <!-- End of Keep Alive MIBs -->
        <config_element name="unifiSTARouterAdvertisementMinimumIntervalToForward" psid="2505">
            <description_user> STA Mode: This variable specifies the minimum interval to forward Router Advertisement frame to Host. Minimum value = 60 secs.
            </description_user>
            <units>s</units>
            <access_rights>read_write</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <default>60</default>
            <range_max>4294967285</range_max>
        </config_element>
        <!-- End of Router Advertisement Rate Reduction MIBs -->
        <config_element name="unifiFragmentationDuration" psid="2524">
            <description_user>A limit on transmission time for a data frame. If the data payload would take longer than unifiFragmentationDuration to transmit, UniFi will attempt to fragment the frame to ensure that the data portion of each fragment is within the limit. The limit imposed by the fragmentation threshold is also respected, and no more than 16 fragments may be generated. If the value is zero no limit is imposed. The value may be changed dynamically during connections. Note that the limit is a guideline and may not always be respected. In particular, the data rate is finalised after fragmentation in order to ensure responsiveness to conditions, the calculation is not performed to high accuracy, and octets added during encryption are not included in the duration calculation.
            </description_user>
            <units>&#x00b5;s</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>0</default>
            <function_list>
                <function type="get" function_name="mibuint16get" is_for_vif="true"></function>
                <function type="set" function_name="mibuint16set" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiMLMEScanChannelMaxScanTime" psid="2001">
            <description_user>For testing: overrides max_scan_time. 0 indicates not used. </description_user>
            <access_rights>read_only</access_rights>
            <type>octet_string</type>
            <range_min>14</range_min>
            <range_max>14</range_max>
            <default>{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }</default>
        </config_element>
        <config_element name="unifiMLMEScanChannelProbeInterval" psid="2002">
            <description_user>For testing: overrides probe interval. 0 indicates not used. </description_user>
            <access_rights>read_only</access_rights>
            <type>octet_string</type>
            <range_min>14</range_min>
            <range_max>14</range_max>
            <default>{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }</default>
        </config_element>
        <config_element name="unifiMLMEScanProbeInterval" psid="2007">
            <description_user>This attribute specifies the time between transmissions of broadcast probe requests on a given channel when performing an active scan. </description_user>
            <units>TU</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>70</default>
        </config_element>
        <config_element name="unifiMLMEScanDeltaRSSIThreshold" psid="2010">
            <description_user>This attribute specifies the magnitude of the change in RSSI for which a scan result will be issued </description_user>
            <units>dB</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <range_min>1</range_min>
            <range_max>255</range_max>
            <default>20</default>
        </config_element>
        <config_element name="unifiMLMEScanDeltaSNRThreshold" psid="2013">
            <description_user>This attribute specifies the magnitude of the change in SNR for a station in scan for which a scan result will be issued
            </description_user>
            <units>dB</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <range_min>1</range_min>
            <range_max>255</range_max>
            <default>255</default>
        </config_element>
        <config_element name="unifiMLMEScanHighRSSIThreshold" psid="2008">
            <description_user>This attribute specifies the minimum RSSI necessary for a new station to enter the coverage area of scan.
            </description_user>
            <units>dBm</units>
            <access_rights>read_write</access_rights>
            <type>int16</type>
            <format>signed_decimal</format>
            <range_min>-128</range_min>
            <range_max>127</range_max>
            <default>-100</default>
        </config_element>
        <config_element name="unifiMLMEScanHighSNRThreshold" psid="2011">
            <description_user>This attribute specifies the minimum SNR necessary for a new station to enter the coverage area of scan.
            </description_user>
            <units>dB</units>
            <access_rights>read_write</access_rights>
            <type>int16</type>
            <format>signed_decimal</format>
            <range_min>-128</range_min>
            <range_max>127</range_max>
            <default>-100</default>
        </config_element>
        <config_element name="unifiMLMEScanMaximumAge" psid="2014">
            <description_user>Not supported</description_user>
            <description_internal>The Scan Maximum Age indicates how long the firmware should keep Beacon information, such as Beacon hash, from an AP starting from the time it leaves the coverage area. Scan Maximum Age is irrelevant when the AP is in coverage area</description_internal>
            <units>s</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <range_min>1</range_min>
            <range_max>2147</range_max>
            <default>5</default>
        </config_element>
        <config_element name="unifiMLMEScanMaximumResults" psid="2015">
            <description_user>This attribute specifies the maximum number of scan results (for all scans) which will be stored before the oldest result is discarded, irrespective of its age. The value 0 specifies no maximum.</description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>40</default>
        </config_element>
        <config_element name="unifiMLMEScanMaxNumberOfProbeSets" psid="2087">
            <description_user>Max number of Probe Request sets that the scan engine will send on a single channel. </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>2</default>
        </config_element>
        <config_element name="unifiMLMEScanStopIfLessThanXFrames" psid="2088">
            <description_user>Stop scanning on a channel if less than X Beacons or Probe Responses are received. </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>4</default>
        </config_element>
        <config_element name="unifiMLMEAutonomousScanNoisy" psid="2016">
            <description_user>Not supported</description_user>
            <description_internal>[JR] Former user description parked here This attribute specifies whether certain fault reports occurring during an scan should be suppressed in order to minimise host interface activity.
            </description_internal>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <format>signed_decimal</format>
            <default>false</default>
        </config_element>
        <config_element name="unifiGoogleMaxNumberOfPeriodicScans" psid="2260">
            <description_user>Max number of periodic scans for Google scan functionality. </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>6</default>
        </config_element>
        <config_element name="unifiGoogleMaxRSSISampleSize" psid="2261">
            <description_user>Max number of RSSI samples used for averaging RSSI in Google scan functionality. </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>8</default>
        </config_element>
        <config_element name="unifiGoogleMaxHotlistAPs" psid="2262">
            <description_user>Max number of entries for hotlist APs in Google scan functionality. </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>64</default>
        </config_element>
        <config_element name="unifiGoogleMaxSignificantWifiChangeAPs" psid="2263">
            <description_user>Max number of entries for significant WiFi change APs in Google scan functionality. </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>64</default>
        </config_element>
        <config_element name="unifiGoogleMaxBssidHistoryEntries" psid="2264">
            <description_user>Max number of BSSID/RSSI that the device can hold in Google scan functionality. </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>0</default>
        </config_element>
        <config_element name="unifiMLMEConnectionTimeOut" psid="2000">
            <description_user>Firmware waits for unifiMLMEConnectionTimeOut of no successful Tx/Rx (including beacon) to/from AP before it disconnects from AP.For STA case - Setting it to less than 3 seconds may result in frequent disconnection with the AP
            </description_user>
            <units>milliseconds</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>3000</default>
            <function_list>
                <function type="get" function_name="mibmlmeuint16get" is_for_vif="true"></function>
                <function type="set" function_name="mibmlmeuint16set" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiMLMEDataReferenceTimeout" psid="2005">
            <description_user>This attribute specifies the maximum time allowed for the data in data references corresponding to MLME primitives to be made available to the firmware. The special value 0 specifies an infinite timeout.
            </description_user>
            <description_internal>Note that the default had better be sufficient to allow for any MLME-SET.request used to set a different value! The value 65535 is reserved for future internal expansion (infinite timeout).
            </description_internal>
            <units>TU</units>
            <access_rights>read_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <range_max>65534</range_max>
            <default>0</default>
        </config_element>
        <config_element name="unifiCSROnlySignalQualityAveragingEnabled" psid="4178">
            <description_user>This variable specifies whether SNR and RSSI values are reported back to the host as averaged values. The averaging is used to remove outliers in the signal quality measurements.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>0</default>
            <function_list>
                <function type="get" function_name="mibuint16get" is_for_vif="true"></function>
                <function type="set" function_name="mibuint16set" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiPowerManagementDelayTimeout" psid="2514">
            <description_user>When UniFi enters power save mode it signals the new state by setting the power management bit in the frame control field of a NULL frame. It then remains active for the period since the previous unicast reception, or since the transmission of the NULL frame, whichever is later. This attribute controls the maximum time during which UniFi will continue to listen for data. This allows any buffered data on a remote device to be cleared. Note that this attribute specifies an upper limit on the timeout. UniFi internally implements a proprietary algorithm to adapt the timeout depending upon the situation.This is used by firmware when current station VIF is only station VIF which can be scheduled
            </description_user>
            <units>&#x00b5;s</units>
            <access_rights>read_write</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <range_max>2147483647</range_max>
            <default>30000</default>
        </config_element>
        <config_element name="unifiConcurrentPowerManagementDelayTimeout" psid="2516">
            <description_user>When UniFi enters power save mode it signals the new state by setting the power management bit in the frame control field of a NULL frame. It then remains active for the period since the previous unicast reception, or since the transmission of the NULL frame, whichever is later. This attribute controls the maximum time during which UniFi will continue to listen for data. This allows any buffered data on a remote device to be cleared.This is same as unifiPowerManagementDelayTimeout but this value is considered only when we are doing multivif operations and other VIFs are waiting to be scheduled.Note that firmware automatically chooses one of unifiPowerManagementDelayTimeout and unifiConcurrentPowerManagementDelayTimeout depending upon the current situation.It is sensible to set unifiPowerManagementDelayTimeout to be always more thanunifiConcurrentPowerManagementDelayTimeout.
            </description_user>
            <units>&#x00b5;s</units>
            <access_rights>read_write</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <range_max>2147483647</range_max>
            <default>6000</default>
        </config_element>
       <config_element name="unifiDisableLegacyPowerSave" psid="2510">
            <description_user> This affects Station VIF power save behaviour.
            Setting it to 1 will disable legacy power save (i.e. we wil use fast power save to retrieve data)
            Note that this MIB actually disables full power save mode (i.e sending trigger to retrieve frames
            which will be PS-POLL for legacy and QOS-NULL for UAPSD)
            </description_user>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <default>1</default>
         </config_element>
       <config_element name="unifiForceActive" psid="2511">
            <description_user> This mib will always force station power save mode to be active (when scheduled).
            VIF scheduling, coex and other non-VIF specific reasons could still force power save on VIF.
            Applies to all VIFs of type station (includes P2P clieant).
            This mib is only provided for test purpose.
            Changes to the mib will only get applied after next host/mlme power management request.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <default>0</default>
         </config_element>
       <config_element name="unifiIdleModeLiteEnabled" psid="2526">
            <description_user> This mib enables/disables Idle Mode Lite at runtime.
            Setting it to 1 enables idle mode lite to activate, if softAP is active, and there has been no activity for a time.
            Setting it to 0 prevents idle mode lite from being activated; idle mode lite should not be active if host has sent a command to change this mib key.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <default>1</default>
         </config_element>
        <config_element name="unifiApBeaconMaxDrift" psid="2507">
            <description_user> The maximum drift in microseconds we will allow for each beacon sent when we're trying to move it to get a 50% duty cycle between GO and STA in multiple VIF scenario. We'll delay our TX beacon by a maximum of this value until we reach our target TBTT. We have 3 possible cases for this value: a) ap_beacon_max_drift = 0x0000  -  Feature disabled b) ap_beacon_max_drift between 0x0001 and 0xFFFE -  Each time we transmit the beacon we'll move it a little bit forward but never more than this. (Not implemented yet) c) ap_beacon_max_drift = 0xFFFF - Move the beacon to the desired position in one shot.
            </description_user>
            <units>&#x00b5;s</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>0xFFFF</default>
        </config_element>
        <config_element name="unifiMacBeaconTimeout" psid="2270">
            <description_user> The maximum time in microseconds we want to stall TX data when expecting a beacon at EBRT time as a station.
            </description_user>
            <units>&#x00b5;s</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>128</default>
        </config_element>
        <config_element name="unifiRSSIMaxAveragingPeriod" psid="2210">
            <description_user>This attribute limits the period over which the value of unifiRSSI is averaged. If no more than unifiRSSIMinReceivedFrames frames have been received in the period, then the value of unifiRSSI is reset to the value of the next measurement and the rolling average is restarted. This ensures that the value is timely (although possibly poorly averaged) when little data is being received.
            </description_user>
            <units>TU</units>
            <access_rights>read_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <range_min>1</range_min>
            <default>1024</default>
        </config_element>
        <config_element name="unifiRSSIMinReceivedFrames" psid="2211">
            <description_user>See the description of unifiRSSIMaxAveragingPeriod for how the combination of attributes is used.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <range_min>1</range_min>
            <default>2</default>
        </config_element>
        <config_element name="unifiRMCActionPeriod" psid="2220">
        <description_user>This variable specifies the repetition period at which the Leader Select Action frame shall be transmitted.
        </description_user>
            <units>ms</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>300</default>
            <range_max>1000</range_max>
        </config_element>
        <config_element name="unifiRMCLeaderReselectPeriod" psid="2221">
            <description_user>This variable specifies the rate at which the F/W will determine whether or not the current Receiver Leader should change based on link quality.
            </description_user>
            <units>s</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>30</default>
            <range_max>360</range_max>
        </config_element>
        <config_element name="unifiCSROnlyEIFSDuration" psid="2362">
            <description_user>This attribute specifies time that is used for EIFS. A value of 0 causes the build in value to be used.
            </description_user>
            <access_rights>read_only</access_rights>
            <units>&#x00b5;s</units>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <range_min>0</range_min>
            <range_max>65535</range_max>
            <default>12</default>
        </config_element>
        <config_element name="unifiForceChannelBW" psid="2370">
            <description_user> Test Mib to force channel bandwidth to specified value.
            This is used to allow emulator/silicon back to back connection to commnunicate
            at bandwidth other than default (20 MHz)
            Setting it to 0 uses the default bandwidth as selected by firmware
            channel_bw_20_mhz   = 20,
            channel_bw_40_mhz   = 40,
            channel_bw_80_mhz   = 80,
            Note that it is live mib with default set to 0.
            Its default value is set in firmware and can't be changed by just
            changing the value in mib.xml file
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>0</default>
            <function_list>
                <function type="set" function_name="mibuint16set" is_for_vif="false" ></function>
                <function type="get" function_name="mibuint16get" is_for_vif="false" ></function>
            </function_list>
        </config_element>
        <config_element name="unifiRadioCalibrationMode" psid="2521">
            <description_user>This attribute is used to control the radio calibration operations performed by UniFi. If this key is left in the &apos;calibrate-auto&apos; state then the firmware will perform radio calibrations whenever they are required. In this mode a calibration is always performed after the first MLME-RESET - this calibration is required to enable the radio. This key can be set to the &apos;calibrate-now&apos; value to hint to the firmware that a calibration should be performed now. This can be useful if the host software knows that the radio has not been used for some time, but that it is about to be used. If this key is set to the &apos;no-calibrate&apos; setting then no radio calibrations will be performed by the firmware until it is commanded to (by setting the key to either &apos;calibrate-auto&apos; or &apos;calibrate-now&apos;. If this key is set to this state before the first MLME-RESET then the radio will not be able to be used. The
                &apos;no-calibrate&apos; mode will allow the fastest booting and will ensure that no RF power is emitted from the device. In this mode the radio will not work, even for receive.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>unifiRadioCalibrationMode</type>
            <format>unsigned_decimal</format>
            <function_list>
                <function type="get" function_name="mibradiocalibrationmodeget"></function>
                <function type="set" function_name="mibradiocalibrationmodeset"></function>
            </function_list>
        </config_element>
        <config_element name="unifiSwToHwQueueStats" psid="2250">
            <description_user> The timing statistics of packets being queued between SW-HW </description_user>
            <access_rights>read_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <table_name>unifiQueueStatsIdTable</table_name>
            <function_list>
                <function type="get" function_name="mibqueuestatsget" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiHostToSwQueueStats" psid="2251">
            <description_user> The timing statistics of packets being queued between HOST-SW </description_user>
            <access_rights>read_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <table_name>unifiQueueStatsIdTable</table_name>
            <function_list>
                <function type="get" function_name="mibqueuestatsget" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiQueueStatsEnable" psid="2252">
            <description_user>Enables recording timing statistics of packets being queued between HOST-SW-HW </description_user>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <format>signed_decimal</format>
            <default>false</default>
            <function_list>
                <function type="set" function_name="mibuint16set" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiRateStatsRate" psid="2212">
            <description_user>The rate corresponding to the current table entry. The value is rounded to the nearest number of units where necessary. Most rates do not require rounding, but when short guard interval is in effect the rates are no longer multiples of the base unit. Note that there may be two occurrences of the value 130: the first corresponds to MCS index 7, and the second, if present, to MCS index 6 with short guard interval.
            </description_user>
            <description_internal> This MIB is used to get the rate for rate statistics table entry index.
            </description_internal>
            <access_rights>read_only</access_rights>
            <type>uint16</type>
            <units>500 kbps</units>
            <format>unsigned_decimal</format>
            <table_name>unifiRateStatsTable</table_name>
            <function type="get" function_name="mibuint16get"></function>
        </config_element>
        <config_element name="unifiRateStatsRxSuccessCount" psid="2206">
            <description_user>The number of successful receptions of complete management and data frames at the rate indexed by unifiRateStatsIndex.This number will wrap to zero after the range is exceeded.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <table_name>unifiRateStatsTable</table_name>
            <function_list>
                <function type="get" function_name="mibratestatsget" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiRateStatsTxSuccessCount" psid="2207">
            <description_user>The number of successful (acknowledged) unicast transmissions of complete data or management frames the rate indexed by unifiRateStatsIndex. This number will wrap to zero after the range is exceeded.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <table_name>unifiRateStatsTable</table_name>
            <function_list>
                <function type="get" function_name="mibratestatsget" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiTxDataConfirm" psid="2253">
            <description_user>This attribute allows to request on a per access class basis that an MA_UNITDATA.confirm be generated after each packet transfer. The default value is applied for all ACs.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <format>signed_decimal</format>
            <default>false</default>
            <table_name>unifiAcTxConfirmTable</table_name>
            <function_list>
                <function type="set" function_name="mibtxdatacfmset" is_for_vif="false"></function>
            </function_list>
        </config_element>
        <config_element name="unifiTxDataRate" psid="2208">
            <description_user>The bit rate currently in use for transmissions of unicast data frames; On an infrastructure BSS, this is the data rate used in communicating with the associated access point, if there is none, an error is returned
            </description_user>
            <description_internal>Request is made per-VIF. Rate is read from station records</description_internal>
            <access_rights>read_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <function_list>
                <function type="get" function_name="mibtxdatarateget" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiNoAckActivationCount" psid="2240">
            <description_user>The number of frames that are discarded due to HW No-ack activated during test.
                             This number will wrap to zero after the range is exceeded.
            </description_user>
            <description_internal> This MIB is used to get the number of discarded frames when
                                   HW No-ack is activated during test.
            </description_internal>
            <access_rights>read_only</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <function_list>
                <function type="get" function_name="mibuint32get"></function>
            </function_list>
        </config_element>
        <config_element name="unifiRxFcsErrorCount" psid="2241">
            <description_user>The number of received frames that are discarded due to bad FCS (CRC).
                              This number will wrap to zero after the range is exceeded.
            </description_user>
            <description_internal> This MIB is used to get the number of discarded received frames
                                   due to bad FCS (CRC) as detected by the HW.
            </description_internal>
            <access_rights>read_only</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <function_list>
                <function type="get" function_name="mibuint32get"></function>
            </function_list>
        </config_element>
        <config_element name="unifiReadReg" psid="8051">
            <description_user>Read value from a register and return it.
            </description_user>
            <description_internal> Register access function.
            </description_internal>
            <access_rights>read_only</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <table_name>unifiReadRegTable</table_name>
            <function_list>
                <function type="get" function_name="mibreadreg"></function>
            </function_list>
        </config_element>
        <config_element name="unifiRsnCapabilities" psid="2034">
            <description_user>This MIB variable encodes the RSN Capabilities field of IEEE 802.11 RSN Information Element.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>hexadecimal</format>
            <default>0x248C</default>
        </config_element>
        <config_element name="unifiHwTxTimeout" psid="2205">
            <description_user> This MIB sets the maximum time in milliseconds for a frame to be queued in the hardware/DPIF.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <units>milliseconds</units>
            <format>unsigned_decimal</format>
            <default>512</default>
        </config_element>
        <config_element name="unifiSwTxTimeout" psid="2204">
            <description_user> This MIB sets the maximum time in seconds for a frame to be queued in firmware, ready to be sent, but not yet actually pumped to hardware.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <units>seconds</units>
            <format>unsigned_decimal</format>
            <default>5</default>
        </config_element>
        <config_element name="unifiSNR" psid="2202">
            <description_user>This attribute provides a running average of the Signal to Noise Ratio (SNR) for packets received by UniFi&apos;s radio.</description_user>
            <units>dB</units>
            <access_rights>read_only</access_rights>
            <type>int16</type>
            <format>signed_decimal</format>
            <function type="get" function_name="mibgetsnr" is_for_vif="true"></function>
        </config_element>
        <config_element name="unifiSNRExtraOffsetCCK" psid="2209">
            <description_user>This offset is added to SNR values received at 802.11b data rates. This accounts for differences in the RF pathway between 802.11b and 802.11g demodulators. The offset applies to values of unifiSNR as well as SNR values in scan indications. This attribute is not used in 5GHz mode.
            </description_user>
            <units>dB</units>
            <access_rights>read_only</access_rights>
            <type>int16</type>
            <format>signed_decimal</format>
            <default>8</default>
        </config_element>
        <config_element name="unifiScanMaxProbeTransmitLifetime" psid="2531">
            <description_user>If the value of this attribute is non zero, it is used during active scans as the maximum lifetime for probe requests.It is the elapsed time after the initial transmissionat which further attempts to transmit the probe are terminated.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint32</type>
            <units>TU</units>
            <format>unsigned_decimal</format>
            <range_min>1</range_min>
            <default>64</default>
        </config_element>
        <config_element name="unifiProbeResponseLifetime" psid="2533">
            <description_user>This mib entry is used to indicate the lifetime of proberesponse frame in unit of ms.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>500</default>
        </config_element>
        <config_element name="unifiProbeResponseMaxRetry" psid="2534">
            <description_user>This mib entry is used to indicate the number of retries of probe response frame.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>5</default>
        </config_element>
        <config_element name="unifiPowerSaveTransitionPacketThreshold" psid="2532">
            <description_user> If VIF has these many packet queued/transmitted/received in last unifiFastPowerSaveTransitionPeriod then firmware may decide to come out of aggressive power save mode. This is applicable to STA (CLI) and GO (VIF).Note that this is only a guideline. Firmware internal factors may override this MIB.Also see unifiExitPowerSavePeriod and unifiAggressivePowerSaveTransitionPeriod.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>10</default>
        </config_element>
        <config_element name="unifiExitPowerSavePeriod" psid="2535">
            <description_user> Period in TUs over which firmware counts number of packet transmitted/queued/received to decide to come out of aggressive power save mode.This is applicable to STA (CLI) and GO (AP) VIF. Note that this is only a guideline. Firmware internal factors may override this MIB. Also see unifiPowerSaveTransitionPacketThreshold and unifiAggressivePowerSaveTransitionPeriod
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <units>TU</units>
            <format>unsigned_decimal</format>
            <default>200</default>
        </config_element>
        <config_element name="unifiAggressivePowerSaveTransitionPeriod" psid="2536">
            <description_user> Defines how many unifiExitPowerSavePeriod firmware should wait in which VIF had received/transmitted/queued less than unifiPowerSaveTransitionPacketThreshold packets - before entering aggressive power save mode (when not in aggressive power save mode) This is applicable to STA (CLI) and GO (AP) VIF. Note that this is only a guideline. Firmware internal factors may override this MIB. Also see unifiPowerSaveTransitionPacketThreshold and unifiExitPowerSavePeriod.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <units>TU</units>
            <format>unsigned_decimal</format>
            <default>5</default>
        </config_element>
        <config_element name="unifiActiveTimeAfterMoreBit" psid="2537">
            <description_user> After seeing the "more" bit set in a message from the AP, the STA will goto active mode for this duration of time. After this time, traffic information is evaluated to determine whether the STA should stay active or go to powersave. Setting this value to 0 means that the described functionality is disabled.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint32</type>
            <units>TU</units>
            <format>unsigned_decimal</format>
            <default>30</default>
        </config_element>
        <config_element name="unifiForcedScheduleDuration" psid="2538">
            <description_user> Defines the time to keep a VIF scheduled after an outgoing packet is queued, if the "Immediate_Response_Expected" bit is set Tx control associated with a frame transmission request. The firmware may choose to override this value based on internal logic.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <units>TU</units>
            <format>unsigned_decimal</format>
            <default>50</default>
            <function_list>
                <function type="get" function_name="mibuint16get" is_for_vif="true"></function>
                <function type="set" function_name="mibuint16set" is_for_vif="true"></function>
            </function_list>
        </config_element>

       <config_element name="unifiMAXVifScheduleDuration" psid="2541">
            <description_user>
            Default time for which a non-scan VIF can be scheduled. Applies to multiVIF scenario.
            This is used as a guideline to firmware.
            Internal firmware logic or BSS state (e.g. NOA) may cut short the schedule..
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <units>TU</units>
            <format>unsigned_decimal</format>
            <default>20</default>
        </config_element>

       <config_element name="unifiVifLongIntervalTime" psid="2542">
            <description_user>When the scheduler expects a VIF to schedule for time longer than this parameter (specified in TUs), then the VIF may come out of powersave. Only valid for STA VIFs.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <units>TU</units>
            <format>unsigned_decimal</format>
            <default>60</default>
        </config_element>
        <config_element name="unifiUartConfigure" psid="2110">
            <description_user>An MLME-SET.request of this attribute causes the UART to be configured using the values of the other unifiUart* attributes. The value supplied for this attribute is ignored.
            </description_user>
            <is_internal>true</is_internal>
            <access_rights>write_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
        </config_element>
        <config_element name="unifiUartPios" psid="2111">
            <description_user>Specification of which PIOs should be connected to the UART. Currently defined values are: 1 - UART not used; all PIOs are available for other uses. 2 - Data transmit and receive connected to PIO[12] and PIO[14] respectively. No hardware handshaking lines. 3 - Data and handshaking lines connected to PIO[12:15].
            </description_user>
            <is_internal>true</is_internal>
            <access_rights>read_write</access_rights>
            <type>unifiUartPios</type>
            <format>unsigned_decimal</format>
        </config_element>
        <config_element name="unifiHighTemperatureCutOffThreshold" psid="2446">
            <description_user>This attribute specifies the temperature threshold at which wifi transmission will be paused. Normal values for this MIB is between +85 to +125 degree Celsius. Setting the value to 255 will disable the Cut off mechanism. Deprecated - Condor onwards
            </description_user>
            <access_rights>write_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <range_min>0</range_min>
            <range_max>255</range_max>
            <default>255</default>
            <units>Celsius</units>
        </config_element>
        <config_element name="unifiLowTemperatureResumeThreshold" psid="2447">
            <description_user>This attribute specifies the temperature threshold below which wifi transmission will be resumed. Normal values for this MIB is between +85 to +125 degree Celsius. Setting the value to 255 will disable the resume mechanism. Its value should always be less than unifiHighTemperatureCutOffThreshold value. Deprecated - Condor onwards
            </description_user>
            <access_rights>write_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <range_min>0</range_min>
            <range_max>255</range_max>
            <default>105</default>
            <units>Celsius</units>
        </config_element>
        <config_element name="unifiWatchdogTimeout" psid="2152">
            <description_user>This attribute specifies the maximum time the background may be busy or locked out for. If this time is exceeded, UniFi will reset. If this key is set to 65535 then the watchdog will be disabled.
            </description_user>
            <units>ms</units>
            <access_rights>read_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <range_min>1</range_min>
            <default>1500</default>
        </config_element>
        <config_element name="unifiCoexCDLConfig" psid="2424">
            <description_user> These contain the spectral thresholds corresponding to the absolute difference between channel values:
	            octet 0 - collision_table.spectral_threshs.thresh_2
	            octet 1 - collision_table.spectral_threshs.thresh_1
	            octet 2 - collision_table.spectral_threshs.thresh_0

	            These correspond to the TX and RX collision table settings:
	            octet 3 - collision_table.local_tx_remote_rx_collision_table
	            octet 4 - collision_table.local_tx_remote_tx_collision_table
	            octet 5 - collision_table.local_rx_remote_rx_collision_table
	            octet 6 - collision_table.local_rx_remote_tx_collision_table

	            These contain settings of the priority difference thresholding:
	            octet 7 - priority_difference_table.thresh_neg
	            octet 8 - priority_difference_table.thresh_0
	            octet 9 - priority_difference_table.thresh_1
	            octet 10 - priority_difference_table.thresh_2

	            And finally the following describes the action tables These are 16 bit fields with LSB first and MSB second (for histrorical reasons)
	            octet 11 - action_table.abort_table (lsb)
	            octet 12 - action_table.abort_table (msb)
	            octet 13 - action_table.lcl_table_1 (lsb)
	            octet 14 - action_table.lcl_table_1 (msb)
	            octet 15 - action_table.lcl_table_2 (lsb)
	            octet 16 - action_table.lcl_table_2 (msb)
            </description_user>
            <access_rights>read_write</access_rights>
            <type>octet_string</type>
            <range_min>17</range_min>
            <range_max>17</range_max>
            <default>{ 0x02, 0x03, 0x04, 0x54, 0x54, 0x50, 0x54, 0x00, 0x01, 0x02, 0x03, 0xee, 0xee, 0xee, 0xee, 0xee, 0xee }</default>
        </config_element>
        <config_element name="unifiCoexCMEBTCDLPriorityTable" psid="5014">
            <description_user>This string contains the coexistence configuration for the CME BT CDL priority table.
	            Description:
	            octet 0 LS Nibble - page - CDL priority for page
	            octet 0 MS Nibble - page_scan - CDL priority for page scan
	            octet 1 LS Nibble - inquiry - CDL priority for inquiry
	            octet 1 MS Nibble - inquiry_scan - CDL priority for inquiry scan
	            octet 2 LS Nibble - role_switch - CDL priority for role_switch
	            octet 2 MS Nibble - lmp_to_master - CDL priority for LMP to master
	            octet 3 LS Nibble - lmp_from_master - CDL priority for LMP from master
	            octet 3 MS Nibble - esco - CDL priority for SCO/eSCO
	            octet 4 LS Nibble - esco_retrans - CDL priority for eSCO retransmissions
	            octet 4 MS Nibble - polling - CDL priority for polling
	            octet 5 LS Nibble - sniff - CDL priority for start of sniff
	            octet 5 MS Nibble - bulk_acl - CDL priority for bulk ACL
	            octet 6 LS Nibble - broadcast - CDL priority for broadcast transmissions
	            octet 6 MS Nibble - park - CDL priority for park
	            octet 7 LS Nibble - band_scan - CDL priority for band scan
	            octet 7 MS Nibble - cond_scan - CDL priority for conditional scan
	            octet 8 LS Nibble - trim - CDL priority for radio trim
	            octet 8 MS Nibble - ble_nonconnectable_advert - CDL priority for BLE non-connectable advertising
	            octet 9 LS Nibble - ble_discoverable_advert - CDL priority for BLE discoverable advertising
	            octet 9 MS Nibble - ble_undirected_advert - CDL priority for BLE connectable undirected advertising
	            octet 10 LS Nibble - ble_directed_advert - CDL priority for BLE connectable directed advertising
	            octet 10 MS Nibble - ble_advert_scan_response - CDL priority for BLE advertising scan response
	            octet 11 LS Nibble - ble_passive_scan - CDL priority for BLE passive scanning
	            octet 11 MS Nibble - ble_active_scan - CDL priority for BLE active scanning
	            octet 12 LS Nibble - ble_active_scan_response - CDL priority for BLE active scanning scanresponse
	            octet 12 MS Nibble - ble_initiator - CDL priority for BLE initiator
	            octet 13 LS Nibble - ble_master_establishment - CDL priority for BLE connection establishment (master)
	            octet 13 MS Nibble - ble_slave_establishment - CDL priority for BLE connection establishment (slave)
	            octet 14 LS Nibble - ble_master_anchor - CDL priority for BLE anchor point (master)
	            octet 14 MS Nibble - ble_slave_anchor - CDL priority for BLE anchor point (slave)
	            octet 15 LS Nibble - ble_master_data - CDL priority for BLE data (master)
	            octet 15 MS Nibble - ble_slave_data - CDL priority for BLE data (slave)
	            octet 16 LS Nibble - ant_priority_0 - CDL priority for ANT low priority packets
	            octet 16 MS Nibble - ant_priority_1 - CDL priority for ANT medium priority packets
	            octet 17 LS Nibble - ant_priority_2 - CDL priority for ANT high priority packets
	            octet 17 MS Nibble - low_priority_sniff - CDL priority for low priority sniff packets
	            octet 18 LS Nibble - a2dp_puncture_mode - CDL priority for A2DP puncture mode packets
	            octet 18 MS Nibble - a2dp_non_puncture_mode - CDL priority for A2DP non-puncture mode packets
	            octet 19 LS Nibble - spare - spare entry to complete 16-bit word
	            octet 19 MS Nibble - spare - spare entry to complete 16-bit word
            </description_user>
            <access_rights>read_write</access_rights>
            <type>octet_string</type>
            <range_min>20</range_min>
            <range_max>20</range_max>
            <default>{ 0x99, 0x99, 0x99, 0xc9, 0x5c, 0x59, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x99, 0x55, 0x64, 0x5d, 0x5c, 0x00 }</default>
        </config_element>
        <config_element name="unifiCoexAllowAnaDisable" psid="5017">
            <description_user>This allows WL to turn ANA protection OFF. This is needed in EVT1.1 where BT and WL activity adversely affect each other, resulting in PUNCTURING MODE not working (The failure case is that BT cannot TX during WL RX activity).
            </description_user>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <format>signed_decimal</format>
            <default>false</default>
        </config_element>
        <config_element name="unifiForceShortSlotTime" psid="5080">
            <description_user>If set to true, forces the UniFi chip to always use short slot times for all VIFs.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <format>signed_decimal</format>
            <default>false</default>
        </config_element>
        <config_element name="unifiRSSI" psid="2200">
            <description_user>This attribute provides a running average of the Received Signal Strength Indication (RSSI) for packets received by UniFi&apos;s radio. The value should only be treated as an indication of the signal strength; it is not an accurate measurement. The result is only meaningful if the unifiRxExternalGain attribute is set to the correct calibration value. If UniFi is part of a BSS, only frames originating from devices in the BSS are reported (so far as this can be determined). The average is reset when UniFi joins or starts a BSS or is reset.
            </description_user>
            <description_internal>Use the lack of a (default) value to signal to rame that the RSSI hasn&apos;t been calibrated, and thus calls to mibgetrssi() will return FALSE.
            </description_internal>
            <units>dBm</units>
            <access_rights>read_only</access_rights>
            <type>int16</type>
            <format>signed_decimal</format>
            <function type="get" function_name="mibgetrssi" is_for_vif="true"></function>
        </config_element>
        <config_element name="unifiPeerRSSI" psid="2097">
            <description_user>This attribute provides a running average of the Received Signal Strength
                              Indication (RSSI) for packets received from the peer. The value is only an
                              indication of the signal strength; it is not an accurate measurement.
                              The table will be reset when UniFi joins or starts a
                              BSS or is reset. An entry is reset when the corresponding peer station record is deleted.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>int16</type>
            <format>signed_decimal</format>
            <range_min>-32768</range_min>
            <range_max>32767</range_max>
            <table_name>unifiPeerIdTable</table_name>
            <function type="get" function_name="mibpeerrssiget" is_for_vif="true"></function>
        </config_element>
        <config_element name="unifiTxSettings" psid="5031">
            <description_user>Hardware specific transmitter settings</description_user>
            <access_rights>write_only</access_rights>
            <type>octet_string</type>
            <range_min>0</range_min>
            <range_max>255</range_max>
            <function type="set" function_name="mibricetxsettingsrowset" is_for_vif="false"></function>
            <table_name>unifiTxSettingsTable</table_name>
        </config_element>
        <config_element name="unifiTxGainSettings" psid="5032">
            <description_user>Hardware specific transmitter gain settings</description_user>
            <access_rights>write_only</access_rights>
            <type>octet_string</type>
            <range_min>0</range_min>
            <range_max>255</range_max>
            <function type="set" function_name="mibricetxgainsettingsrowset" is_for_vif="false"></function>
            <table_name>unifiTxGainSettingsTable</table_name>
        </config_element>
        <config_element name="unifiTxPowerDetectorResponse" psid="5055">
            <description_user>Hardware specific transmitter detector response settings</description_user>
            <access_rights>write_only</access_rights>
            <type>octet_string</type>
            <range_min>0</range_min>
            <range_max>255</range_max>
            <function type="set" function_name="mibricetxpowerdetresprowset" is_for_vif="false"></function>
            <table_name>unifiTxPowerDetectorResponseTable</table_name>
        </config_element>
        <config_element name="unifiTxDetectorTemperatureCompensation" psid="5056">
            <description_user>Hardware specific transmitter detector temperature compensation settings</description_user>
            <access_rights>write_only</access_rights>
            <type>octet_string</type>
            <range_min>0</range_min>
            <range_max>255</range_max>
            <function type="set" function_name="mibricetxdetectortempcomprowset" is_for_vif="false"></function>
            <table_name>unifiTxDetectorTemperatureCompensationTable</table_name>
        </config_element>
        <config_element name="unifiTxDetectorFrequencyCompensation" psid="5057">
            <description_user>Hardware specific transmitter detector frequency compensation settings
            </description_user>
            <access_rights>write_only</access_rights>
            <type>octet_string</type>
            <range_min>0</range_min>
            <range_max>255</range_max>
            <function type="set" function_name="mibricetxdetectorfreqcomprowset" is_for_vif="false"></function>
            <table_name>unifiTxDetectorFrequencyCompensationTable</table_name>
        </config_element>
        <config_element name="unifiTxOpenLoopTemperatureCompensation" psid="5058">
            <description_user>Hardware specific transmitter open-loop temperature compensation settings
            </description_user>
            <access_rights>write_only</access_rights>
            <type>octet_string</type>
            <range_min>0</range_min>
            <range_max>255</range_max>
            <function type="set" function_name="mibricetxopenlooptempcomprowset" is_for_vif="false"></function>
            <table_name>unifiTxOpenLoopTemperatureCompensationTable</table_name>
        </config_element>
        <config_element name="unifiTxOpenLoopFrequencyCompensation" psid="5059">
            <description_user>Hardware specific transmitter open-loop frequency compensation settings
            </description_user>
            <access_rights>write_only</access_rights>
            <type>octet_string</type>
            <range_min>0</range_min>
            <range_max>255</range_max>
            <function type="set" function_name="mibricetxopenloopfreqcomprowset" is_for_vif="false"></function>
            <table_name>unifiTxOpenLoopFrequencyCompensationTable</table_name>
        </config_element>
        <config_element name="unifiTxOfdmSelect" psid="5060">
            <description_user>Hardware specific transmitter OFDM selection settings.</description_user>
            <access_rights>write_only</access_rights>
            <type>octet_string</type>
            <range_min>4</range_min>
            <range_max>4</range_max>
            <function type="set" function_name="mibricetxofdmselectset" is_for_vif="false"></function>
        </config_element>
        <config_element name="unifiTxDigGain" psid="5061">
            <description_user>This attribute used to specify gain specific modulation power optimisation.
            </description_user>
            <access_rights>write_only</access_rights>
            <type>octet_string</type>
            <range_min>16</range_min>
            <range_max>16</range_max>
            <function type="set" function_name="mibricetxdiggainset" is_for_vif="false"></function>
        </config_element>
        <config_element name="unifiChipTemperature" psid="5062">
            <description_user>This attribute used to read the chip temperature as seen by WLAN radio firmware
            </description_user>
            <access_rights>read_only</access_rights>
            <type>int16</type>
            <format>signed_decimal</format>
            <units>celcius</units>
            <function type="get" function_name="mibricetemperatureget"></function>
        </config_element>
        <config_element name="UnifiBatteryVoltage" psid="5063">
            <description_user>This attribute used to read the battery voltage</description_user>
            <access_rights>read_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <units>millivolt</units>
            <function type="get" function_name="mibricevbatteryget"></function>
        </config_element>
        <config_element name="unifiLoadDpdLut" psid="2255">
            <description_user>Write a DPD LUT entry
            </description_user>
            <description_internal>Write DPD LUT entry for testing
            </description_internal>
            <access_rights>read_write</access_rights>
            <type>octet_string</type>
            <range_min>144</range_min>
            <range_max>144</range_max>
            <function_list>
                <function type="get" function_name="mibricedpdlutget"></function>
                <function type="set" function_name="mibricedpdlutset"></function>
            </function_list>
            <table_name>unifiLoadDpdLutTable</table_name>
        </config_element>
        <config_element name="unifiDpdPredistortGains" psid="2257">
            <description_user>
                This attribute used to specify DPD pre-distort mode gains for each 2G channel.
                The format is [freq_msb, freq_lsb, OFDM0_gain, OFDM1_gain, CCK_gain, TR_gain].
                The sequence is repeated for each 2G channel starting with lowest channel.
            </description_user>
            <access_rights>write_only</access_rights>
            <type>octet_string</type>
            <range_min>98</range_min>
            <range_max>98</range_max>
            <function type="set" function_name="mibricedpdpredistgainsset" is_for_vif="false"></function>
        </config_element>
        <config_element name="unifiDpdMasterSwitch" psid="2256">
            <description_user>Enables Digital Pre-Distortion
            </description_user>
            <description_internal>Bitmask of DPD features to enable for testing, requires d01_d01 or later.
            </description_internal>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>signed_decimal</format>
            <default>0</default>
            <function_list>
                <function type="get" function_name="mibricedpdmasterswitchget" is_for_vif="false"></function>
                <function type="set" function_name="mibricedpdmasterswitchset" is_for_vif="false"></function>
            </function_list>
        </config_element>
        <config_element name="unifiTxPowerTrimConfig" psid="5072">
            <description_user>
                This attribute used to specify configuration settings for the TX power trim.
                The format is [band, psat_v2i_gain, psat_mix_gain, psat_drv_gain, psat_pa_gain,
                psat_power_ref_mso, psat_power_ref_lso,
                psat_drv_bias, psat_pa_bias, max_adjust_up_mso, max_adjust_up_lso,
                max_adjust_down_mso, max_adjust_down_lso].
            </description_user>
            <access_rights>write_only</access_rights>
            <type>octet_string</type>
            <range_min>13</range_min>
            <range_max>13</range_max>
            <function type="set" function_name="mibricetxpowertrimconfig" is_for_vif="false"></function>
        </config_element>
        <config_element name="unifiRxAgcControl" psid="4079">
            <description_user>This attribute is used to override the AGC by adjusting
                the Rx minimum and maximum gains of each stage.
                Set requests write the values to a static structure in
                mac/arch/maxwell/hal/halradio_agc.c.  The saved values are written
                to the Jar register WLRF_RADIO_AGC_CONFIG2 and to the Night registers
                WL_RADIO_AGC_CONFIG2 and WL_RADIO_AGC_CONFIG3.  The saved values are also
                used to configure the AGC whenever halradio_agc_setup() is called.
                Get requests read the values from the static structure in
                mac/arch/maxwell/hal/halradio_agc.c.
                AGC enables are not altered.  Fixed gain may be tested by setting the
                minimums and maximums to the same value.

                Version.
            octet  0  -  Version number for this mib.
                Gain values.  Default in brackets.
            octet  1  -  5G LNA minimum gain (0).
            octet  2  -  5G LNA maximum gain (4).
            octet  3  -  2G LNA minimum gain (0).
            octet  4  -  2G LNA maximum gain (5).
            octet  5  -  Mixer minimum gain (0).
            octet  6  -  Mixer maximum gain (2).
            octet  7  -  ABB minimum gain (0).
            octet  8  -  ABB maximum gain (27).
            octet  9  -  Digital minimum gain (0).
            octet 10  -  Digital maximum gain (7).
            </description_user>
            <access_rights>read_write</access_rights>
            <type>octet_string</type>
            <range_min>11</range_min>
            <range_max>11</range_max>
            <function_list>
                <function type="get" function_name="mibriceagccontrolget" is_for_vif="false"></function>
                <function type="set" function_name="mibriceagccontrolset" is_for_vif="false"></function>
            </function_list>
        </config_element>
        <config_element name="unifiTxAntennaConnectionLossFrequency" psid="5033">
            <description_user>The corresponding set of frequency values for TxAntennaConnectionLossTable
            </description_user>
            <access_rights>write_only</access_rights>
            <type>uint16</type>
            <range_min>3940</range_min>
            <range_max>12000</range_max>
            <function type="set" function_name="mibricetxantconnlossrowset" is_for_vif="false"></function>
            <table_name>unifiTxAntennaConnectionLossTable</table_name>
        </config_element>
        <config_element name="unifiTxAntennaConnectionLoss" psid="5034">
            <description_user>The set of Antenna Connection Loss value, which is used for TPO/EIRP conversion
            </description_user>
            <access_rights>write_only</access_rights>
            <type>int16</type>
            <range_min>-128</range_min>
            <range_max>127</range_max>
            <function type="set" function_name="mibricetxantconnlossrowset" is_for_vif="false"></function>
            <table_name>unifiTxAntennaConnectionLossTable</table_name>
        </config_element>
        <config_element name="unifiTxAntennaMaxGainFrequency" psid="5035">
            <description_user>The corresponding set of frequency values for TxAntennaMaxGain
            </description_user>
            <access_rights>write_only</access_rights>
            <type>uint16</type>
            <range_min>3940</range_min>
            <range_max>12000</range_max>
            <function type="set" function_name="mibricetxantmaxgainrowset" is_for_vif="false"></function>
            <table_name>unifiTxAntennaMaxGainTable</table_name>
        </config_element>
        <config_element name="unifiTxAntennaMaxGain" psid="5036">
            <description_user>The set of Antenna Max Gain value, which is used for TPO/EIRP conversion
            </description_user>
            <access_rights>write_only</access_rights>
            <type>int16</type>
            <range_min>-128</range_min>
            <range_max>127</range_max>
            <function type="set" function_name="mibricetxantmaxgainrowset" is_for_vif="false"></function>
            <table_name>unifiTxAntennaMaxGainTable</table_name>
        </config_element>
        <config_element name="unifiRxExternalGainFrequency" psid="5037">
            <description_user>The set of RSSI offset value</description_user>
            <access_rights>write_only</access_rights>
            <type>uint16</type>
            <range_min>3940</range_min>
            <range_max>12000</range_max>
            <function type="set" function_name="mibricerxextgainrowset" is_for_vif="false"></function>
            <table_name>unifiRxExternalGainTable</table_name>
        </config_element>
        <config_element name="unifiRxExternalGain" psid="5038">
            <description_user>The table giving frequency-dependent RSSI offset value
            </description_user>
            <access_rights>write_only</access_rights>
            <type>int16</type>
            <range_min>-128</range_min>
            <range_max>127</range_max>
            <function type="set" function_name="mibricerxextgainrowset" is_for_vif="false"></function>
            <table_name>unifiRxExternalGainTable</table_name>
        </config_element>
        <config_element name="unifiCurrentTxpowerLevel" psid="6020">
            <description_user>This attribute shall indicate the maximum air power for the VIF, currently used. Values are expressed in 0.25 dBm units.
            </description_user>
            <description_internal>
            </description_internal>
            <access_rights>read_only</access_rights>
            <type>int16</type>
            <format>signed_decimal</format>
            <default>0</default>
            <function type="get" function_name="mibint16get" is_for_vif="true"></function>
            <units>qdBm</units>
        </config_element>
        <config_element name="unifiDebugInstantDelivery" psid="6069">
            <description_user>Instant delivery control of the debug messages when set to true.
            Note: will not allow the host to suspend when set to True.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <default>false</default>
            <function_list>
                <function type="set" function_name="mibdebuginstantdeliveryset" is_for_vif="false"></function>
            </function_list>
        </config_element>
        <config_element name="unifiDebugEnable" psid="6071">
            <description_user>Debug to host state. Debug is either is sent to the host or it isn't.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <default>true</default>
            <function_list>
                <function type="set" function_name="mibdebugenableset" is_for_vif="false"></function>
            </function_list>
        </config_element>
        <config_element name="unifiDebugModuleControl" psid="5029">
            <description_user>Debug Module levels for all modules.
            Module debug level is used to filter debug messages sent to the host.
            Only 6 levels of debug per module are available:
            a.  -1     No debug created.
            b.  0      Debug if compiled in. Should not cause Buffer Full in normal testing.
            c.  1 - 3  Levels to allow sensible setting of the .hcf file while running specific tests or debugging
            d.  4      Debug will harm normal execution due to excessive levels or processing time required. Only used in emergency debugging.
            Additional control for FSM transition and FSM signals logging is provided.

            Debug module level and 2 boolean flags are encoded within a uint16:
            Function  |  Is sending FSM signals  |  Is sending FSM transitions  |  Reseved  |  Module level (signed int)
            ----------+--------------------------+------------------------------+-----------+----------------------------
            Bits      |         15               |              14              |   13 - 8  |       7 - 0

            Note: 0x00FF disables any debug for a module
                  0xC004 enables all debug for a module
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>hexadecimal</format>
            <table_name>unifiDebugConfigTable</table_name>
            <default_list>
                <!-- To find the module see unifiDebugModulesIndex  -->
                <!-- Please don't add comments that hint what the index is. -->
                <default index1="1">  0xC000 </default>
                <default index1="2">  0x0000 </default>
                <default index1="3">  0x00FF </default>
                <default index1="4">  0xC000 </default>
                <default index1="5">  0x00FF </default>
                <default index1="6">  0x00FF </default>
                <default index1="7">  0xC000 </default>
                <default index1="8">  0xC000 </default>
                <default index1="9">  0x00FF </default>
                <default index1="10"> 0x00FF </default>
                <default index1="11"> 0x00FF </default>
                <default index1="12"> 0x00FF </default>
                <default index1="13"> 0x00FF </default>
                <default index1="14"> 0x00FF </default>
                <default index1="15"> 0x00FF </default>
                <default index1="16"> 0x00FF </default>
                <default index1="17"> 0x0000 </default>
                <default index1="18"> 0x00FF </default>
                <default index1="19"> 0x00FF </default>
                <default index1="20"> 0x00FF </default>
                <default index1="21"> 0x00FF </default>
                <default index1="22"> 0x00FF </default>
                <default index1="23"> 0x00FF </default>
                <default index1="24"> 0xC000 </default>
                <default index1="25"> 0x0000 </default>
                <default index1="26"> 0x00FF </default>
                <default index1="27"> 0x00FF </default>
                <default index1="28"> 0x00FF </default>
                <default index1="29"> 0x00FF </default>
                <default index1="30"> 0x0000 </default>
                <default index1="31"> 0x00FF </default>
                <default index1="32"> 0x00FF </default>
                <default index1="33"> 0x00FF </default>
                <default index1="34"> 0x00FF </default>
                <default index1="35"> 0x00FF </default>
                <default index1="36"> 0xC000 </default>
                <default index1="37"> 0x0000 </default>
                <default index1="38"> 0x00FF </default>
                <default index1="39"> 0x00FF </default>
                <default index1="40"> 0x00FF </default>
                <default index1="41"> 0x00FF </default>
                <default index1="42"> 0x00FF </default>
                <default index1="43"> 0x00FF </default>
                <default index1="44"> 0x00FF </default>
                <default index1="45"> 0x00FF </default>
                <default index1="46"> 0x00FF </default>
                <default index1="47"> 0x00FF </default>
                <default index1="48"> 0x00FF </default>
                <default index1="49"> 0x00FF </default>
                <default index1="50"> 0x00FF </default>
                <default index1="51"> 0x00FF </default>
            </default_list>
        </config_element>
        <!-- unifiTxOOBConstraintTable Transmit out-of-band regulatory constraint table -->
        <config_element name="unifiTxOOBConstraints" psid="5064">
          <description_user> OOB constraints table.
| octects | description                                                                                                                                                                                                                                                                                                                                                                                                                                           |
|---------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|     0-1 | Hardware platform. Check unifiHardwarePlatform enum for possible values.                                                                                                                                                                                                                                                                                                                                                                              |
|       2 | DPD applicability bitmask: 0 = no DPD, 1 = dynamic DPD, 2 = static DPD, 3 = applies to both static and dynamic DPD                                                                                                                                                                                                                                                                                                                                    |
|     3-4 | Bitmask indicating which regulatory domains this rule applies to FCC=bit0, ETSI=bit1, JAPAN=bit2                                                                                                                                                                                                                                                                                                                                                      |
|     5-6 | Bitmask indicating which band edges this rule applies to RICE_BAND_EDGE_ISM_24G_LOWER = bit 0, RICE_BAND_EDGE_ISM_24G_UPPER = bit 1, RICE_BAND_EDGE_U_NII_1_LOWER = bit 2, RICE_BAND_EDGE_U_NII_1_UPPER = bit 3, RICE_BAND_EDGE_U_NII_2_LOWER = bit 4, RICE_BAND_EDGE_U_NII_2_UPPER = bit 5, RICE_BAND_EDGE_U_NII_2E_LOWER = bit 6, RICE_BAND_EDGE_U_NII_2E_UPPER = bit 7, RICE_BAND_EDGE_U_NII_3_LOWER = bit 8, RICE_BAND_EDGE_U_NII_3_UPPER = bit 9 |
|       7 | Bitmask indicating which modulation types this rule applies to (LSB/b0=DSSS/CCK, b1= OFDM0 modulation group, b2= OFDM1 modulation group)                                                                                                                                                                                                                                                                                                              |
|       7 | Bitmask indicating which channel bandwidths this rule applies to (LSB/b0=20MHz, b1=40MHz, b2=80MHz)                                                                                                                                                                                                                                                                                                                                                   |
|       8 | Minimum distance to nearest band edge in 500 kHz units for which this constraint becomes is applicable.                                                                                                                                                                                                                                                                                                                                               |
|      10 | Maximum power (EIRP) for this particular constraint - specified in units of quarter dBm.                                                                                                                                                                                                                                                                                                                                                              |
|   11-12 | Spectral shaping configuration to be used for this particular constraint. The value is specific to the radio hardware and should only be altered under advice from the IC supplier.                                                                                                                                                                                                                                                                   |
                                                                                                                                                                                     |
            </description_user>
            <access_rights>write_only</access_rights>
            <type>octet_string</type>
            <table_name>unifiTxOOBConstraintTable</table_name>
        </config_element>
        <!-- end of unifiTxOOBConstraintTable -->
        <!-- unifiTxPowerAdjustTable Transmit power compensation table based on temperature and frequency. -->
        <!-- Columns -->
        <config_element name="unifiTxPowerAdjustFrequency" psid="5049">
            <description_user> Frequency reference point for a row in unifiTxPowerAdjustTable, specified in 500 kHz units.
            </description_user>
            <access_rights>write_only</access_rights>
            <type>uint16</type>
            <range_min>4800</range_min>
            <range_max>12000</range_max>
            <table_name>unifiTxPowerAdjustTable</table_name>
        </config_element>
        <config_element name="unifiTxPowerAdjustTemperature" psid="5050">
            <description_user> Temperature reference point for a row in unifiTxPowerAdjustTable, specified in degrees Celsius
            </description_user>
            <access_rights>write_only</access_rights>
            <type>int16</type>
            <range_min>-128</range_min>
            <range_max>127</range_max>
            <table_name>unifiTxPowerAdjustTable</table_name>
        </config_element>
        <config_element name="unifiTxPowerAdjustDelta" psid="5051">
            <description_user> Delta adjustment in quarter dB for a row in unifiTxPowerAdjustTable.
            </description_user>
            <access_rights>write_only</access_rights>
            <type>int16</type>
            <range_min>-128</range_min>
            <range_max>127</range_max>
            <table_name>unifiTxPowerAdjustTable</table_name>
        </config_element>
        <!-- end of unifiTxPowerAdjustTable -->
        <!-- unifiRegulatoryTable Regulatory information for all countries. -->
        <!-- Columns -->
        <config_element name="unifiRegulatoryParameters" psid="8011">
            <description_user>Regulatory parameters.
            Each row of the table contains the regulatory rules for one country:
            octet 0 - first character of alpha2 code for country
            octet 1 - second character of alpha2 code for country
            octet 2 - regulatory domain for the country
            Followed by the rules for the country, numbered 0..n in this description
            octet 7n+3 - LSB start frequency octet
            7n+4 - MSB start frequency octet
            7n+5 - LSB end frequency octet
            7n+6 - MSB end frequency octet
            7n+7 - maximum bandwidth octet
            7n+8 - maximum power octet
            7n+9 - rule flags
            </description_user>
            <access_rights>read_only</access_rights>
            <type>octet_string</type>
            <range_min>3</range_min>
            <range_max>73</range_max>
            <table_name>unifiRegulatoryTable</table_name>
            <default_list>

    <default index1="1">{0x30,0x30,0x00,
             0x62,0x09,0xA8,0x09,0x28,0x14,0x00,
             0x99,0x09,0xB2,0x09,0x28,0x14,0x01,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x14,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x14,0x00}</default>
    <default index1="2">{0x41,0x44,0x00,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0x50,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="3">{0x41,0x45,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="4">{0x41,0x46,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="5">{0x41,0x49,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="6">{0x41,0x4C,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="7">{0x41,0x4D,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x14,0x12,0x00,
             0x82,0x14,0xD2,0x14,0x14,0x12,0x02}</default>
    <default index1="8">{0x41,0x4E,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="9">{0x41,0x52,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="10">{0x41,0x53,0x02,
             0x62,0x09,0xA8,0x09,0x28,0x1E,0x00,
             0x32,0x14,0x82,0x14,0x50,0x18,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="11">{0x41,0x54,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="12">{0x41,0x55,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="13">{0x41,0x57,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="14">{0x41,0x5A,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x12,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x12,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="15">{0x42,0x41,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="16">{0x42,0x42,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x17,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x17,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="17">{0x42,0x44,0x03,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="18">{0x42,0x45,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="19">{0x42,0x46,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="20">{0x42,0x47,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x5D,0x16,0xF3,0x16,0x50,0x0E,0x00}</default>
    <default index1="21">{0x42,0x48,0x03,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x14,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x14,0x14,0x02,
             0x67,0x16,0xCB,0x16,0x14,0x14,0x00}</default>
    <default index1="22">{0x42,0x4C,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="23">{0x42,0x4D,0x02,
             0x62,0x09,0xA8,0x09,0x28,0x1E,0x00,
             0x32,0x14,0x82,0x14,0x50,0x18,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="24">{0x42,0x4E,0x03,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x14,0x00}</default>
    <default index1="25">{0x42,0x4F,0x03,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x1E,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="26">{0x42,0x52,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="27">{0x42,0x53,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x18,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="28">{0x42,0x54,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="29">{0x42,0x59,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="30">{0x42,0x5A,0x03,
             0x62,0x09,0xB2,0x09,0x28,0x1E,0x00,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="31">{0x43,0x41,0x02,
             0x62,0x09,0xA8,0x09,0x28,0x1E,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0xE0,0x15,0x50,0x18,0x02,
             0x12,0x16,0x62,0x16,0x50,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="32">{0x43,0x46,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x28,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x28,0x18,0x02,
             0x72,0x15,0x62,0x16,0x28,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x28,0x1E,0x00}</default>
    <default index1="33">{0x43,0x48,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="34">{0x43,0x49,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="35">{0x43,0x4C,0x03,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x14,0x00}</default>
    <default index1="36">{0x43,0x4E,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x17,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x17,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="37">{0x43,0x4F,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="38">{0x43,0x52,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x14,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x14,0x18,0x02,
             0x72,0x15,0x62,0x16,0x14,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x14,0x1E,0x00}</default>
    <default index1="39">{0x43,0x55,0x02,
             0x32,0x14,0x82,0x14,0x50,0x17,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x17,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x17,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="40">{0x43,0x58,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x18,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="41">{0x43,0x59,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="42">{0x43,0x5A,0x01,
             0x60,0x09,0xB3,0x09,0x28,0x14,0x00,
             0x1E,0x14,0x82,0x14,0x50,0x17,0x10,
             0x82,0x14,0xE6,0x14,0x50,0x14,0x12,
             0x5E,0x15,0x5D,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="43">{0x44,0x45,0x01,
             0x60,0x09,0xB3,0x09,0x28,0x14,0x00,
             0x1E,0x14,0x82,0x14,0x50,0x14,0x10,
             0x82,0x14,0xE6,0x14,0x50,0x14,0x12,
             0x5E,0x15,0x5D,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="44">{0x44,0x4B,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="45">{0x44,0x4D,0x02,
             0x62,0x09,0xA8,0x09,0x28,0x1E,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x17,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="46">{0x44,0x4F,0x02,
             0x62,0x09,0xA8,0x09,0x28,0x1E,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x17,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="47">{0x44,0x5A,0x03,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x1E,0x14,0x82,0x14,0x50,0x17,0x10,
             0x82,0x14,0xE6,0x14,0x50,0x17,0x02,
             0x5E,0x15,0x26,0x16,0xA0,0x1E,0x0A}</default>
    <default index1="48">{0x45,0x43,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x14,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x14,0x18,0x02,
             0x72,0x15,0x62,0x16,0x14,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x14,0x1E,0x00}</default>
    <default index1="49">{0x45,0x45,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="50">{0x45,0x47,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x28,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x28,0x14,0x02}</default>
    <default index1="51">{0x45,0x53,0x01,
             0x60,0x09,0xB3,0x09,0x28,0x14,0x00,
             0x1E,0x14,0x82,0x14,0x50,0x17,0x10,
             0x82,0x14,0xE6,0x14,0x50,0x14,0x12,
             0x5E,0x15,0x5D,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="52">{0x45,0x54,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="53">{0x46,0x49,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="54">{0x46,0x4C,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="55">{0x46,0x4D,0x02,
             0x62,0x09,0xA8,0x09,0x28,0x1E,0x00,
             0x32,0x14,0x82,0x14,0x50,0x18,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="56">{0x46,0x52,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="57">{0x47,0x42,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="58">{0x47,0x44,0x02,
             0x62,0x09,0xA8,0x09,0x28,0x1E,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="59">{0x47,0x45,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x12,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x12,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="60">{0x47,0x46,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="61">{0x47,0x48,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="62">{0x47,0x4C,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="63">{0x47,0x50,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="64">{0x47,0x52,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="65">{0x47,0x54,0x02,
             0x62,0x09,0xA8,0x09,0x28,0x1E,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x17,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="66">{0x47,0x55,0x02,
             0x62,0x09,0xA8,0x09,0x28,0x1E,0x00,
             0x32,0x14,0x82,0x14,0x14,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x14,0x18,0x02,
             0x72,0x15,0x62,0x16,0x14,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x14,0x1E,0x00}</default>
    <default index1="67">{0x47,0x59,0x00,
             0x62,0x09,0xB2,0x09,0x28,0x1E,0x00,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="68">{0x48,0x4B,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="69">{0x48,0x4E,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="70">{0x48,0x52,0x01,
             0x60,0x09,0xB3,0x09,0x28,0x14,0x00,
             0x1E,0x14,0x82,0x14,0x50,0x17,0x10,
             0x82,0x14,0xE6,0x14,0x50,0x14,0x12,
             0x5E,0x15,0x5D,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="71">{0x48,0x54,0x02,
             0x62,0x09,0xA8,0x09,0x28,0x1E,0x00,
             0x32,0x14,0x82,0x14,0x50,0x18,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="72">{0x48,0x55,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="73">{0x49,0x44,0x03,
             0x62,0x09,0xB2,0x09,0x14,0x14,0x00,
             0x67,0x16,0xB7,0x16,0x14,0x17,0x00}</default>
    <default index1="74">{0x49,0x45,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="75">{0x49,0x4C,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x17,0x10,
             0x82,0x14,0xE6,0x14,0x50,0x17,0x12,
             0x72,0x15,0x4E,0x16,0x50,0x17,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x17,0x01}</default>
    <default index1="76">{0x49,0x4E,0x03,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x14,0x00}</default>
    <default index1="77">{0x49,0x52,0x03,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="78">{0x49,0x53,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="79">{0x49,0x54,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="80">{0x4A,0x4D,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="81">{0x4A,0x4F,0x03,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x17,0x00,
             0x67,0x16,0xCB,0x16,0x50,0x17,0x00}</default>
    <default index1="82">{0x4A,0x50,0x03,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x2E,0x13,0x7E,0x13,0x28,0x17,0x00,
             0xA6,0x13,0xE2,0x13,0x28,0x17,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x17,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x14,0x02}</default>
    <default index1="83">{0x4B,0x45,0x03,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x17,0x00,
             0x72,0x15,0xC2,0x15,0x50,0x1E,0x02,
             0x67,0x16,0x8F,0x16,0x28,0x17,0x00}</default>
    <default index1="84">{0x4B,0x48,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="85">{0x4B,0x4E,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1E,0x02,
             0x67,0x16,0xB7,0x16,0x50,0x1E,0x00}</default>
    <default index1="86">{0x4B,0x50,0x03,
             0x62,0x09,0xB2,0x09,0x14,0x14,0x00,
             0x32,0x14,0x82,0x14,0x14,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x14,0x14,0x02,
             0x72,0x15,0xFE,0x15,0x14,0x1E,0x02,
             0x67,0x16,0xB7,0x16,0x14,0x1E,0x00}</default>
    <default index1="87">{0x4B,0x52,0x03,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x5E,0x15,0x5D,0x16,0xA0,0x1E,0x02,
             0x5D,0x16,0xDA,0x16,0x50,0x1E,0x00}</default>
    <default index1="88">{0x4B,0x57,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02}</default>
    <default index1="89">{0x4B,0x59,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x18,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="90">{0x4B,0x5A,0x00,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00}</default>
    <default index1="91">{0x4C,0x42,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="92">{0x4C,0x43,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1E,0x02,
             0x67,0x16,0xB7,0x16,0x50,0x1E,0x00}</default>
    <default index1="93">{0x4C,0x49,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="94">{0x4C,0x4B,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x14,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x14,0x18,0x02,
             0x72,0x15,0x62,0x16,0x14,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x14,0x1E,0x00}</default>
    <default index1="95">{0x4C,0x53,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="96">{0x4C,0x54,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="97">{0x4C,0x55,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="98">{0x4C,0x56,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="99">{0x4D,0x41,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02}</default>
    <default index1="100">{0x4D,0x43,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="101">{0x4D,0x44,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="102">{0x4D,0x45,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="103">{0x4D,0x46,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="104">{0x4D,0x48,0x02,
             0x62,0x09,0xA8,0x09,0x28,0x1E,0x00,
             0x32,0x14,0x82,0x14,0x50,0x18,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="105">{0x4D,0x4B,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="106">{0x4D,0x4E,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x18,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="107">{0x4D,0x4F,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x17,0x00,
             0x32,0x14,0x82,0x14,0x50,0x17,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x17,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x1E,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="108">{0x4D,0x50,0x02,
             0x62,0x09,0xA8,0x09,0x28,0x1E,0x00,
             0x32,0x14,0x82,0x14,0x50,0x18,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="109">{0x4D,0x51,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="110">{0x4D,0x52,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="111">{0x4D,0x54,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="112">{0x4D,0x55,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x18,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="113">{0x4D,0x56,0x01,
             0x60,0x09,0xB3,0x09,0x28,0x14,0x00,
             0x1E,0x14,0x82,0x14,0x50,0x17,0x00,
             0x82,0x14,0xE6,0x14,0x50,0x14,0x02,
             0x5D,0x16,0xDA,0x16,0x50,0x14,0x00}</default>
    <default index1="114">{0x4D,0x57,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="115">{0x4D,0x58,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="116">{0x4D,0x59,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x18,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x12,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x18,0x00}</default>
    <default index1="117">{0x4E,0x47,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x1E,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="118">{0x4E,0x49,0x02,
             0x62,0x09,0xA8,0x09,0x28,0x1E,0x00,
             0x32,0x14,0x82,0x14,0x50,0x18,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="119">{0x4E,0x4C,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x10,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x12,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="120">{0x4E,0x4F,0x01,
             0x60,0x09,0xB3,0x09,0x28,0x14,0x00,
             0x1E,0x14,0x82,0x14,0x50,0x17,0x00,
             0x82,0x14,0xE6,0x14,0x50,0x14,0x02,
             0x5E,0x15,0xA3,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="121">{0x4E,0x50,0x03,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x14,0x00}</default>
    <default index1="122">{0x4E,0x5A,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x1E,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="123">{0x4F,0x4D,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="124">{0x50,0x41,0x02,
             0x62,0x09,0xA8,0x09,0x28,0x1E,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x17,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="125">{0x50,0x45,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="126">{0x50,0x46,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="127">{0x50,0x47,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="128">{0x50,0x48,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="129">{0x50,0x4B,0x03,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="130">{0x50,0x4C,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="131">{0x50,0x4D,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="132">{0x50,0x52,0x02,
             0x62,0x09,0xA8,0x09,0x28,0x1E,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="133">{0x50,0x54,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="134">{0x50,0x57,0x02,
             0x62,0x09,0xA8,0x09,0x28,0x1E,0x00,
             0x32,0x14,0x82,0x14,0x50,0x18,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="135">{0x50,0x59,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x18,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="136">{0x51,0x41,0x03,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="137">{0x52,0x45,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="138">{0x52,0x4F,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="139">{0x52,0x53,0x01,
             0x60,0x09,0xB3,0x09,0x28,0x14,0x00,
             0x1E,0x14,0xE6,0x14,0x28,0x17,0x10,
             0x5E,0x15,0x5D,0x16,0x14,0x1E,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="140">{0x52,0x55,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x12,0x16,0x62,0x16,0x50,0x1E,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="141">{0x52,0x57,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="142">{0x53,0x41,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="143">{0x53,0x45,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="144">{0x53,0x47,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="145">{0x53,0x49,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="146">{0x53,0x4B,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="147">{0x53,0x4D,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="148">{0x53,0x4E,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="149">{0x53,0x52,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="150">{0x53,0x56,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x14,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x14,0x17,0x02,
             0x67,0x16,0xCB,0x16,0x14,0x1E,0x00}</default>
    <default index1="151">{0x53,0x59,0x00,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00}</default>
    <default index1="152">{0x54,0x43,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x18,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="153">{0x54,0x44,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="154">{0x54,0x47,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x28,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x28,0x14,0x02,
             0x72,0x15,0x4E,0x16,0x28,0x1B,0x02}</default>
    <default index1="155">{0x54,0x48,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="156">{0x54,0x4E,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02}</default>
    <default index1="157">{0x54,0x52,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x0E,0x00}</default>
    <default index1="158">{0x54,0x54,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="159">{0x54,0x57,0x02,
             0x60,0x09,0xB3,0x09,0x28,0x1E,0x00,
             0x1E,0x14,0x82,0x14,0x50,0x17,0x00,
             0x82,0x14,0xE6,0x14,0x50,0x17,0x02,
             0x5E,0x15,0x5D,0x16,0xA0,0x17,0x02,
             0x5D,0x16,0xDA,0x16,0x50,0x1E,0x00}</default>
    <default index1="160">{0x54,0x5A,0x00,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="161">{0x55,0x41,0x01,
             0x60,0x09,0xB3,0x09,0x28,0x14,0x10,
             0x1E,0x14,0x82,0x14,0x50,0x14,0x10,
             0x82,0x14,0xE6,0x14,0x50,0x14,0x12,
             0x72,0x15,0x26,0x16,0xA0,0x14,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x14,0x00}</default>
    <default index1="162">{0x55,0x47,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x18,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="163">{0x55,0x53,0x02,
             0x62,0x09,0xA8,0x09,0x28,0x1E,0x00,
             0x32,0x14,0x82,0x14,0x50,0x17,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x17,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x17,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="164">{0x55,0x59,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x17,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x17,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="165">{0x55,0x5A,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02}</default>
    <default index1="166">{0x56,0x43,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="167">{0x56,0x45,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x1E,0x00,
             0x32,0x14,0x82,0x14,0x50,0x17,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x17,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="168">{0x56,0x49,0x02,
             0x62,0x09,0xA8,0x09,0x28,0x1E,0x00,
             0x32,0x14,0x82,0x14,0x50,0x18,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="169">{0x56,0x4E,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0x50,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="170">{0x56,0x55,0x02,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x11,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x18,0x02,
             0x72,0x15,0x62,0x16,0xA0,0x18,0x02,
             0x67,0x16,0xCB,0x16,0x50,0x1E,0x00}</default>
    <default index1="171">{0x57,0x46,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="172">{0x57,0x53,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x28,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x28,0x14,0x02,
             0x72,0x15,0x4E,0x16,0x28,0x1B,0x02}</default>
    <default index1="173">{0x59,0x45,0x00,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00}</default>
    <default index1="174">{0x59,0x54,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
    <default index1="175">{0x5A,0x41,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1E,0x00}</default>
    <default index1="176">{0x5A,0x57,0x01,
             0x62,0x09,0xB2,0x09,0x28,0x14,0x00,
             0x32,0x14,0x82,0x14,0x50,0x14,0x00,
             0x82,0x14,0xD2,0x14,0x50,0x14,0x02,
             0x72,0x15,0x4E,0x16,0xA0,0x1B,0x02}</default>
            </default_list>
        </config_element>
        <!-- end of unifiRegulatoryTable -->
  <!--
      unifiOperatingClassTable

      Operating Class information for all countries.
  -->
  <!-- Index -->
  <config_element
      name="unifiOperatingClassTableIndex" psid="0">
    <type>integer</type>
    <range_min>1</range_min>
    <range_max>200</range_max>
    <description_user>
Index for unifiOperatingClassTable
    </description_user>
  </config_element>

  <!-- Columns -->

<config_element
      name="unifiOperatingClassParamters" psid="8015">
    <description_user>
Operating Class parameters.
Each row of the table contains the regulatory rules for one country:
    octet  0        -  for Region Cone
    octet  1        -  for Operating Class ID
    octet  2 ~ 3    -  for Channel Starting Frequency
    octet  4        -  for Channel Spacing
    octet  5        -  for Number of Elements in Channel Set
    octet  n        -  for Channel Set
    octet  end      -  for Behavior Limits Set
    </description_user>
    <access_rights>read_only</access_rights>
    <type>octet_string</type>
    <range_min>6</range_min>
    <range_max>73</range_max>
    <table_name>unifiOperatingClassTable</table_name>
    <default_list>
    <!-- Global -->
    <default index1="1">{0x53,0x54,0x70,0x73,0x74,0x75,0x7A,0x7B,0x7C,
                         0x7D,0x7E,0x7F,0x80,0x81,0x82}</default>
    <!-- Europe -->
    <default index1="2">{0x01,0x02,0x03,0x05,0x06,0x07,0x08,0x09,0x0A,0x10,
                         0x11,0x80,0x81,0x82}</default>
    <!-- US -->
    <default index1="3">{0x01,0x03,0x05,0x16,0x17,0x19,0x1A,0x1B,0x1C,0x1E,
                         0x1F,0x20,0x21,0x80,0x81,0x82}</default>
    <!-- Japan -->
    <default index1="4">{0x01,0x02,0x03,0x04,0x05,0x06,0x20,0x21,0x24,0x25,
                         0x26,0x29,0x2A,0x2B,0x3A,0x80,0x81,0x82}</default>
    </default_list>
  </config_element>
  <!-- end of unifiOperatingClassTable -->

  <!-- Index -->
  <config_element name="unifiScanParametersTableIndex" psid="0">
    <type>integer</type>
    <range_min>1</range_min>
    <range_max>19</range_max>
    <description_user>Index for unifiScanParametersTable. Index is a Scan_Type as defined in FAPI.</description_user>
  </config_element>
  <!-- Columns -->
  <config_element name="unifiScanParameters" psid="2154">
  <description_user>
    Scan parameters.
    Each row of the table contains 2 entries for a scan: first entry when there is 0 registered VIFs, second - when there is 1 or more registered VIFs.
    Entry has the following structure:
    octet  0        -  Scan priority                          (uint8_t)
    octet  1        -  Enable Early Channel Exit              (uint8_t as bool)
    octet  2 ~ 3    -  Probe Interval in Time Units           (uint16_t)
    octet  4 ~ 5    -  Max Active Channel Time in Time Units  (uint16_t)
    octet  6 ~ 7    -  Max Passive Channel Time in Time Units (uint16_t)
    octet  8 ~ 9    -  Scan Policy                            (uint16_t)
    Size of each entry is 10 octets, row size is 20 octets. A Time Units value specifies a time interval as a multiple of TU (1024 us).
  </description_user>
  <access_rights>read_write</access_rights>
  <type>octet_string</type>
  <range_min>18</range_min>
  <range_max>18</range_max>
  <table_name>unifiScanParametersTable</table_name>
  <default_list>
    <!-- Initial scan
             0 VIFS:      6      true      24TU           58TU          102TU
          >= 1 VIFS (no such thing as initial scan with >= 1 VIFS):
                          6      true      24TU           58TU          102TU -->
    <default index1="1">{ 0x06,  0x01,     0x18,0x00,     0x3A,0x00,    0x66,0x00,    0x00,0x00,
                          0x06,  0x01,     0x18,0x00,     0x3A,0x00,    0x66,0x00,    0x00,0x00  }</default>
    <!-- Full scan
             0 VIFS:      6      true      68TU           244TU         117TU
          >= 1 VIFS:      6      true      24TU           58TU          102TU -->
    <default index1="2">{ 0x06,  0x01,     0x44,0x00,     0xF4,0x00,    0x75,0x00,    0x00,0x00,
                          0x06,  0x01,     0x18,0x00,     0x3A,0x00,    0x66,0x00,    0x00,0x00  }</default>
    <!-- Scheduled scan
             0 VIFS:      2      true      68TU           244TU         117TU
           = 1 VIFS:      2      true      24TU           58TU          102TU -->
    <default index1="3">{ 0x02,  0x01,     0x44,0x00,     0xF4,0x00,    0x75,0x00,    0x00,0x00,
                          0x02,  0x01,     0x18,0x00,     0x3A,0x00,    0x66,0x00,    0x00,0x00  }</default>
    <!-- P2P full scan
             0 VIFS:      6      true      24TU           68TU          102TU
          >= 1 VIFS:      6      true      24TU           68TU          102TU -->
    <default index1="4">{ 0x06,  0x01,     0x18,0x00,     0x44,0x00,    0x66,0x00,    0x00,0x00,
                          0x06,  0x01,     0x18,0x00,     0x44,0x00,    0x66,0x00,    0x00,0x00  }</default>
    <!-- P2P social scan
             0 VIFS:      6      false     24TU           68TU          N/A
          >= 1 VIFS:      6      false     24TU           68TU          N/A   -->
    <default index1="5">{ 0x06,  0x00,     0x18,0x00,     0x44,0x00,    0x00,0x00,    0x00,0x00,
                          0x06,  0x00,     0x18,0x00,     0x44,0x00,    0x00,0x00,    0x00,0x00  }</default>
    <!-- OBSS scan
             0 VIFS:      4      true      24TU           58TU          N/A
          >= 1 VIFS       (no scan with >= 1 VIFS):-->
    <default index1="6">{ 0x04,  0x01,     0x18,0x00,     0x3A,0x00,    0x00,0x00,    0x00,0x00,
                          0x04,  0x01,     0x18,0x00,     0x3A,0x00,    0x00,0x00,    0x00,0x00  }</default>
    <!-- AP Auto Channel Selection scan
             0 VIFS:      4      true      24TU           39TU          N/A
          >= 1 VIFS       (no scan with >= 1 VIFS):-->
    <default index1="7">{ 0x04,  0x01,     0x18,0x00,     0x27,0x00,    0x00,0x00,    0x00,0x00,
                          0x04,  0x01,     0x18,0x00,     0x27,0x00,    0x00,0x00,    0x00,0x00  }</default>
    <!-- PNO scan
             0 VIFS:      0      true      68TU           244TU         117TU
          >= 1 VIFS       (no scan with >= 1 VIFS):-->
    <default index1="8">{ 0x00,  0x01,     0x44,0x00,     0xF4,0x00,    0x75,0x00,    0x00,0x00,
                          0x00,  0x01,     0x44,0x00,     0xF4,0x00,    0x75,0x00,    0x00,0x00  }</default>
    <!-- GSCAN
             0 VIFS:      2      true      68TU           244TU         117TU
          >= 1 VIFS:      2      true      24TU           58TU          102TU -->
    <default index1="9">{ 0x02,  0x01,     0x44,0x00,     0xF4,0x00,    0x75,0x00,    0x00,0x00,
                          0x02,  0x01,     0x18,0x00,     0x3A,0x00,    0x66,0x00,    0x00,0x00  }</default>
    <!-- Measurement scan
             0 VIFS       (no scan with 0 VIFS):
          >= 1 VIFS:      3      true      24TU           58TU          102TU  -->
    <default index1="10">{0x03,  0x01,     0x18,0x00,     0x3A,0x00,    0x66,0x00,    0x80,0x00,
                          0x03,  0x01,     0x18,0x00,     0x3A,0x00,    0x66,0x00,    0x80,0x00  }</default>
    <!-- Soft Neighbour Roaming scan
             0 VIFS NA:   4      false     27TU           68TU          117TU
          >= 1 VIFS:      4      false     27TU           68TU          117TU   -->
    <default index1="11">{0x04,  0x00,     0x1B,0x00,     0x44,0x00,    0x75,0x00,    0x00,0x00,
                          0x04,  0x00,     0x1B,0x00,     0x44,0x00,    0x75,0x00,    0x00,0x00  }</default>
    <!-- Soft Cached Roaming scan
             0 VIFS NA:   4      false     27TU           68TU          117TU
          >= 1 VIFS:      4      false     27TU           68TU          117TU         Any_RA    -->
    <default index1="12">{0x04,  0x00,     0x1B,0x00,     0x44,0x00,    0x75,0x00,    0x04,0x00,
                          0x04,  0x00,     0x1B,0x00,     0x44,0x00,    0x75,0x00,    0x04,0x00  }</default>
    <!-- Soft All Roaming scan
             0 VIFS NA:   4      true      27TU           68TU          117TU
          >= 1 VIFS:      4      true      27TU           68TU          117TU         Any_RA    -->
    <default index1="13">{0x04,  0x01,     0x1B,0x00,     0x44,0x00,    0x75,0x00,    0x04,0x00,
                          0x04,  0x01,     0x1B,0x00,     0x44,0x00,    0x75,0x00,    0x04,0x00  }</default>
    <!-- Hard Neighbour Roaming scan
             0 VIFS NA:   8      false     39TU           98TU          117TU
          >= 1 VIFS:      8      false     39TU           98TU          117TU   -->
    <default index1="14">{0x08,  0x00,     0x27,0x00,     0x62,0x00,    0x75,0x00,    0x00,0x00,
                          0x08,  0x00,     0x27,0x00,     0x62,0x00,    0x75,0x00,    0x00,0x00  }</default>
    <!-- Hard Cached Roaming scan
             0 VIFS NA:   8      false     39TU           98TU          117TU
          >= 1 VIFS:      8      false     39TU           98TU          117TU         Any_RA    -->
    <default index1="15">{0x08,  0x00,     0x27,0x00,     0x62,0x00,    0x75,0x00,    0x04,0x00,
                          0x08,  0x00,     0x27,0x00,     0x62,0x00,    0x75,0x00,    0x04,0x00  }</default>
    <!-- Hard All Roaming scan
             0 VIFS NA:   8      false     39TU           98TU          117TU
          >= 1 VIFS:      8      false     39TU           98TU          117TU         Any_RA    -->
    <default index1="16">{0x08,  0x00,     0x27,0x00,     0x62,0x00,    0x75,0x00,    0x04,0x00,
                          0x08,  0x00,     0x27,0x00,     0x62,0x00,    0x75,0x00,    0x04,0x00  }</default>
    <!-- Dummy Entry -->
    <default index1="17">{0x00,  0x01,     0x02,0x03,     0x04,0x05,    0x06,0x07,    0x08,0x09,
                          0x09,  0x08,     0x07,0x06,     0x05,0x04,    0x03,0x02,    0x01,0x00  }</default>  </default_list>
  </config_element>
  <config_element name="unifiTdlsInP2pActivated" psid="2556">
   <description_user>This attribute, when TRUE, indicates that use TDLS in P2P mode.
    The TDLS in P2P is disabled otherwise.</description_user>
   <access_rights>read_write</access_rights>
   <type>boolean</type>
   <format>signed_decimal</format>
   <default>true</default>
  </config_element>
 <config_element name="unifiTdlsActivated" psid="2558">
   <description_user>This attribute, when TRUE, indicates that use TDLS mode.
    The TDLS is disabled otherwise.</description_user>
   <access_rights>read_write</access_rights>
   <type>boolean</type>
   <format>signed_decimal</format>
   <default>true</default>
  </config_element>
 <config_element name="unifiTdlsTPThresholdPktSecs" psid="2559">
   <description_user>
   his MIB shall be used for the argument "throughput_threshold_pktsecs" of
   RAME-MLME-ENABLE-PEER-TRAFFIC-REPORTING.request signal defined in SC-505422-DD.
   </description_user>
   <access_rights>read_write</access_rights>
   <type>uint32</type>
   <format>unsigned_decimal</format>
   <default>100</default>
  </config_element>

 <config_element name="unifiTdlsRssiThreshold" psid="2560">
   <description_user>
   This MIB shall be used for the FW initiated TDLS Discovery/Setup procedure.
   If the RSSI of a received TDLS Discovery Response frame is greater than this value,
   the TDLS FSM shall initiate the TDLS Setup procedure.
   </description_user>
   <access_rights>read_write</access_rights>
   <type>int16</type>
   <format>signed_decimal</format>
   <default>-75</default>
  </config_element>

 <config_element name="unifiTdlsMaximumRetry" psid="2561">
   <description_user>
   Transmission of a TDLS Action frame or
   a TDLS Discovery Response Public Action frame shall be retried unifiTdlsMaximumRetry times
   until the frame is transmitted successfully.
   </description_user>
   <access_rights>read_write</access_rights>
   <type>uint16</type>
   <format>unsigned_decimal</format>
   <default>3</default>
  </config_element>

 <config_element name="unifiTdlsTPMonitorSecs" psid="2562">
   <description_user>
   add description
   </description_user>
   <access_rights>read_write</access_rights>
   <type>uint16</type>
   <format>unsigned_decimal</format>
   <default>10</default>
  </config_element>

 <config_element name="unifiTdlsBasicHtMcsSet" psid="2563">
   <description_user>
   The TDLS FSM shall monitor the number of transmitted packet count per a TDLS peer
   for unifiTdlsTPMonitorSecs seconds to decide to tear down the TDLS link (see 7.12.1).
   </description_user>
   <access_rights>read_write</access_rights>
   <type>octet_string</type>
   <range_min>16</range_min>
   <range_max>16</range_max>
   <default>{ 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }</default>
  </config_element>

 <config_element name="unifiTdlsBasicVhtMcsSet" psid="2564">
   <description_user>
   This MIB shall be used to build the VHT Operation element in the TDLS Setup Confirm frame
   </description_user>
   <access_rights>read_write</access_rights>
   <type>octet_string</type>
   <range_min>2</range_min>
   <range_max>2</range_max>
   <default>{ 0xfe, 0xff }</default>
  </config_element>

 <config_element name="dot11TDLSDiscoveryRequestWindow" psid="2565">
   <description_user>
   The TDLS FSM shall not transmit the TDLS Discovery Request frame
   within dot11TDLSDiscoveryRequestWindow DTIM intervals
   after transmitting TDLS Discovery Request frame.
   </description_user>
   <access_rights>read_write</access_rights>
   <type>uint32</type>
   <format>unsigned_decimal</format>
   <default>10</default>
  </config_element>

 <config_element name="dot11TDLSResponseTimeout" psid="2566">
   <description_user>
    If no TDLS Setup Response frame is received within dot11TDLSResponseTimeout,
    or if a TDLS Setup Response frame is received with a nonzero status code,
    the TDLS initiator STA shall terminate the setup procedure and discard the TDLS Setup Response frame.
   </description_user>
   <access_rights>read_write</access_rights>
   <type>uint32</type>
   <format>unsigned_decimal</format>
   <default>5</default>
  </config_element>

 <config_element name="dot11TDLSChannelSwitchActivated" psid="2567">
   <description_user>
   If dot11TDLSChannelSwitchActivated is TRUE,
   it need to send TDLS channel switch response packet as corresponeding
   </description_user>
   <access_rights>read_write</access_rights>
   <type>boolean</type>
   <format>signed_decimal</format>
   <default>true</default>
  </config_element>

 <config_element name="unifiTdlsDesignForTestMode" psid="2568">
   <description_user>
   This MIB shall be used to set TDLS design for test mode
   </description_user>
   <access_rights>read_write</access_rights>
   <type>uint32</type>
   <format>hexadecimal</format>
   <default>0x00000000</default>
  </config_element>

 <config_element name="unifiTdlsKeyLifeTimeInterval" psid="2577">
   <description_user>
   This MIB shall be used to build the Key Lifetime Interval in the TDLS Setup Request frame.
   </description_user>
   <access_rights>read_write</access_rights>
   <type>uint32</type>
   <format>unsigned_decimal</format>
   <default>0x000FFFFF</default>
  </config_element>

 <config_element name="unifiOxygenDesignForTestMode" psid="2583">
   <description_user>
   This is only used for the test purpose that can verify the requirements of IBSS/OXYGEN feature
   </description_user>
   <access_rights>read_write</access_rights>
   <type>uint32</type>
   <format>hexadecimal</format>
   <default>0x00000000</default>
  </config_element>

 <config_element name="unifiChannelAnnouncementCount" psid="2584">
   <description_user>
   This is the Channel switch announcement count which will be used in the Channel announcement IE
   </description_user>
   <access_rights>read_write</access_rights>
   <type>uint16</type>
   <format>unsigned_decimal</format>
   <default>10</default>
  </config_element>

 <config_element name="unifiRATestStoredSA" psid="2585">
   <description_user>
   It is source address of router assuming that is contained in virtural router advertisement packet
   This mib is only used for the test purpose, that is, specified in chapter '6.2 Forward Received RA frame to Host' in SC-506393-TE
   </description_user>
   <access_rights>read_write</access_rights>
   <type>octet_string</type>
   <format>hexadecimal</format>
   <default>0x00000000</default>
 </config_element>

 <config_element name="unifiRATestStoreFrame" psid="2586">
   <description_user>
   It is virtual router advertisement packet
   This mib is only used for the test purpose, that is, specified in chapter '6.2 Forward Received RA frame to Host' in SC-506393-TE
   </description_user>
   <access_rights>read_write</access_rights>
   <type>octet_string</type>
   <format>hexadecimal</format>
   <default>0x00000000</default>
 </config_element>

 <config_element name="dot11TDLSPeerUAPSDBufferSTAActivated" psid="2587">
   <description_user>
   This attribute, when true, indicates that the STA implementation is capable
   of supporting TDLS peer U-APSD.
   </description_user>
   <access_rights>read_write</access_rights>
   <type>boolean</type>
   <format>signed_decimal</format>
   <default>false</default>
  </config_element>

        <config_element name="unifiSupportedChannels" psid="8012">
            <description_user> Supported 20MHz channel centre frequency grouped in sub-bands. For each sub-band: starting channel number, followed by number of channels
            </description_user>
            <access_rights>read_write</access_rights>
            <type>octet_string</type>
            <range_min>0</range_min>
            <range_max>20</range_max>
            <default> {0x01,0x0e,0x24,0x04,0x34,0x04,0x64,0x0c,0x95,0x05}
            </default>
        </config_element>
        <config_element name="unifiDefaultCountry" psid="8013">
            <description_user>Allows setting of default country code. Hosts sets the default country (index 1). Each VIF maintains current country code and updates it, but never reads.
            The host can access currently used country code of each VIF, but can't modify it.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>octet_string</type>
            <range_min>3</range_min>
            <range_max>3</range_max>
            <table_name>unifiDefaultCountryTable</table_name>
            <!-- <default>{0x30, 0x30, 0x20}</default> World-->
            <!-- <default>{0x55, 0x53, 0x20}</default> US-->
            <!-- <default>{0x4B, 0x52, 0x20}</default> KR-->
            <default_list>
                <!-- Default country code, can only be written by host. -->
                <default index1="1">{ 0x30, 0x30, 0x20 } </default>
                <!-- VIF1 country code, can only be written by fw. -->
                <default index1="2">{ 0x30, 0x30, 0x20 } </default>
                <!-- VIF2 country code, can only be written by fw. -->
                <default index1="3">{ 0x30, 0x30, 0x20 } </default>
            </default_list>
        </config_element>
        <config_element name="unifiCountryList" psid="8014">
            <description_user>Defines the ordered list of countries present in unifiRegulatoryTable. Each country is coded as 2 ASCII characters. If unifiRegulatoryTable is modified, such as a country is either added, deleted or its relative location is modified, this MIB has to be updated as well.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>octet_string</type>
            <range_min>2</range_min>
            <range_max>500</range_max>
            <default>{ 0x30, 0x30, 0x41, 0x44, 0x41, 0x45, 0x41, 0x46, 0x41, 0x49, 0x41, 0x4c, 0x41, 0x4d, 0x41, 0x4e, 0x41, 0x52, 0x41, 0x53, 0x41, 0x54, 0x41, 0x55, 0x41, 0x57, 0x41, 0x5a, 0x42, 0x41, 0x42, 0x42, 0x42, 0x44, 0x42, 0x45, 0x42, 0x46, 0x42, 0x47, 0x42, 0x48, 0x42, 0x4c, 0x42, 0x4d, 0x42, 0x4e, 0x42, 0x4f, 0x42, 0x52, 0x42, 0x53, 0x42, 0x54, 0x42, 0x59, 0x42, 0x5a, 0x43, 0x41, 0x43, 0x46, 0x43, 0x48, 0x43, 0x49, 0x43, 0x4c, 0x43, 0x4e, 0x43, 0x4f, 0x43, 0x52, 0x43, 0x55, 0x43, 0x58, 0x43, 0x59, 0x43, 0x5a, 0x44, 0x45, 0x44, 0x4b, 0x44, 0x4d, 0x44, 0x4f, 0x44, 0x5a, 0x45, 0x43, 0x45, 0x45, 0x45, 0x47, 0x45, 0x53, 0x45, 0x54, 0x46, 0x49, 0x46, 0x4c, 0x46, 0x4d, 0x46, 0x52, 0x47, 0x42, 0x47, 0x44, 0x47, 0x45, 0x47, 0x46, 0x47, 0x48, 0x47, 0x4c, 0x47, 0x50, 0x47, 0x52, 0x47, 0x54, 0x47, 0x55, 0x47, 0x59, 0x48, 0x4b, 0x48, 0x4e, 0x48, 0x52, 0x48, 0x54, 0x48, 0x55, 0x49, 0x44, 0x49, 0x45, 0x49, 0x4c, 0x49, 0x4e, 0x49, 0x52, 0x49, 0x53, 0x49, 0x54, 0x4a, 0x4d, 0x4a, 0x4f, 0x4a, 0x50,
                0x4b, 0x45, 0x4b, 0x48, 0x4b, 0x4e, 0x4b, 0x50, 0x4b, 0x52, 0x4b, 0x57, 0x4b, 0x59, 0x4b, 0x5a, 0x4c, 0x42, 0x4c, 0x43, 0x4c, 0x49, 0x4c, 0x4b, 0x4c, 0x53, 0x4c, 0x54, 0x4c, 0x55, 0x4c, 0x56, 0x4d, 0x41, 0x4d, 0x43, 0x4d, 0x44, 0x4d, 0x45, 0x4d, 0x46, 0x4d, 0x48, 0x4d, 0x4b, 0x4d, 0x4e, 0x4d, 0x4f, 0x4d, 0x50, 0x4d, 0x51, 0x4d, 0x52, 0x4d, 0x54, 0x4d, 0x55, 0x4d, 0x56, 0x4d, 0x57, 0x4d, 0x58, 0x4d, 0x59, 0x4e, 0x47, 0x4e, 0x49, 0x4e, 0x4c, 0x4e, 0x4f, 0x4e, 0x50, 0x4e, 0x5a, 0x4f, 0x4d, 0x50, 0x41, 0x50, 0x45, 0x50, 0x46, 0x50, 0x47, 0x50, 0x48, 0x50, 0x4b, 0x50, 0x4c, 0x50, 0x4d, 0x50, 0x52, 0x50, 0x54, 0x50, 0x57, 0x50, 0x59, 0x51, 0x41, 0x52, 0x45, 0x52, 0x4f, 0x52, 0x53, 0x52, 0x55, 0x52, 0x57, 0x53, 0x41, 0x53, 0x45, 0x53, 0x47, 0x53, 0x49, 0x53, 0x4b, 0x53, 0x4d, 0x53, 0x4e, 0x53, 0x52, 0x53, 0x56, 0x53, 0x59, 0x54, 0x43, 0x54, 0x44, 0x54, 0x47, 0x54, 0x48, 0x54, 0x4e, 0x54, 0x52, 0x54, 0x54, 0x54, 0x57, 0x54, 0x5a, 0x55, 0x41, 0x55, 0x47, 0x55, 0x53, 0x55, 0x59, 0x55,
                0x5a, 0x56, 0x43, 0x56, 0x45, 0x56, 0x49, 0x56, 0x4e, 0x56, 0x55, 0x57, 0x46, 0x57, 0x53, 0x59, 0x45, 0x59, 0x54, 0x5a, 0x41, 0x5a, 0x57 }</default>
        </config_element>
        <config_element name="unifiNoCellMaxPowerEna" psid="8016">
            <description_user>Max power enable flag for selected channels indicated in unifiNoCellMaxPowerChannels.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <format>unsigned_decimal</format>
            <default>true</default>
            <function_list>
                <function type="get" function_name="mibnocellmaxpowerenaget" is_for_vif="false"></function>
                <function type="set" function_name="mibnocellmaxpowerenaset" is_for_vif="false"></function>
            </function_list>
        </config_element>
        <config_element name="unifiNoCellMaxPower" psid="8017">
            <description_user>Max power values for channels indicated in unifiNoCellMaxPowerChannels. Power specified in dBm units.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>int16</type>
            <format>signed_decimal</format>
            <range_min>5</range_min>
            <range_max>20</range_max>
            <default>7</default>
        </config_element>
        <config_element name="unifiNoCellMaxPowerChannels" psid="8018">
            <description_user>Defines channels that are affected by the unifiNoCellMaxPowerEna control. These channels are defined using uint64 that is represented by the octet string.
            First byte of the octet string maps to LSB, where bit 0 maps to channel 1. Complete mapping coulbd be found in mlme_regulatory_freq_list[] array content in mlme_regulatory module.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>octet_string</type>
            <range_min>8</range_min>
            <range_max>8</range_max>
            <default>{ 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }</default>
        </config_element>
        <config_element name="unifiStationQosInfo" psid="2517">
            <description_user>This MIB variable indicates the QoS capability for a non-AP Station, and is encoded as per IEEE 802.11 QoS Capability.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>hexadecimal</format>
            <range_min>0</range_min>
            <range_max>65535</range_max>
            <default>0</default>
        </config_element>
        <config_element name="unifiListenIntervalSkippingDTIM" psid="2518">
            <description_user>This attribute specifies the listen interval of beacons when in single-vif power saving mode and receiving DTIMs is enabled. No DTIMs are skipped during MVIF operation. A maximum of the listen interval beacons are skipped, which may be less than the number of DTIMs that can be skipped.
                              The value is a lookup table for DTIM counts. Each 4bits, in LSB order, represent DTIM1, DTIM2, DTIM3, DTIM4, DTIM5, (unused).
                              This key is only used for STA VIF, connected to an AP. For P2P group client intervals, refer to unifiP2PListenIntervalSkippingDTIM, PSID=2523.
            </description_user>
            <range_min>0</range_min>
            <range_max>4294967295</range_max>
            <default>0x000A89AA</default>
            <units>DTIM intervals</units>
            <access_rights>read_only</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
        </config_element>
        <config_element name="unifiP2PListenIntervalSkippingDTIM" psid="2523">
            <description_user>This attribute specifies the listen interval of beacons when in single-vif, P2P client power saving mode and receiving DTIMs. No DTIMs are skipped during MVIF operation. A maximum of (listen interval - 1) beacons are skipped, which may be less than the number of DTIMs that can be skipped.
                              The value is a lookup table for DTIM counts. Each 4bits, in LSB order, represent DTIM1, DTIM2, DTIM3, DTIM4, DTIM5, (unused).
                              This key is only used for P2P group client. For STA connected to an AP, refer to unifiListenIntervalSkippingDTIM, PSID=2518.
            </description_user>
            <range_min>0</range_min>
            <range_max>4294967295</range_max>
            <default>0x00000002</default>
            <units>DTIM intervals</units>
            <access_rights>read_only</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
        </config_element>
        <config_element name="unifiListenIntervalMaxTime" psid="2530">
            <description_user>This attribute specifies the maximum number length of time, in Time Units (1TU = 1024us), that can be used as a beacon listen interval. This will limit how many beacons maybe skipped, and affects
                              the DTIM beacon skipping count; DTIM skipping (if enabled) will be such that skipped count = (unifiListenIntervalMaxTime / DTIM_period).
            </description_user>
            <range_min>0</range_min>
            <range_max>65536</range_max>
            <default>1000</default>
            <units>TU</units>
            <access_rights>read_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
        </config_element>
        <config_element name="unifiListenInterval" psid="2519">
            <description_user>Defines the Beacon Listen Interval</description_user>
            <range_min>0</range_min>
            <range_max>100</range_max>
            <default>10</default>
            <units>beacon intervals</units>
            <access_rights>read_only</access_rights>
            <type>int16</type>
            <format>unsigned_decimal</format>
        </config_element>
        <config_element name="unifiBeaconsReceivedPercentage" psid="2245">
            <description_user>Percentage of beacons received, calculated as received / expected. The percentage is scaled to an integer value between 0 (0%) and 1000 (100%).
            </description_user>
            <access_rights>read_only</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <function_list>
                <function type="get" function_name="mibuint32get" is_for_vif="true"></function>
                <function type="set" function_name="mibuint32set" is_for_vif="true"></function>
            </function_list>
            <default>0</default>
        </config_element>
        <config_element name="unifiHtCapabilities" psid="2032">
            <description_user>This MIB variable indicates the HT capabilities of the chip. See SC-503520-SP for further details.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>octet_string</type>
            <range_min>21</range_min>
            <range_max>21</range_max>
            <default>{ 0x7f, 0x09, 0x17, 0xff, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
            </default>
        </config_element>
        <config_element name="unifiVhtCapabilities" psid="2540">
            <description_user>This MIB variable indicates the VHT capabilities of the chip. see SC-503520-SP
            </description_user>
            <access_rights>read_write</access_rights>
            <type>octet_string</type>
            <range_min>12</range_min>
            <range_max>12</range_max>
            <default>{ 0x31, 0x73, 0x80, 0x01, 0xfe, 0xff, 0x00, 0x00, 0xfe, 0xff, 0x00, 0x00 }</default>
        </config_element>
        <config_element name="unifiFrameResponseTimeOut" psid="2080">
            <description_user>How long to wait for a frame (Auth, Assoc, ReAssoc) after Rame replies to a send frame request
            </description_user>
            <range_min>0</range_min>
            <range_max>500</range_max>
            <default>200</default>
            <units>TU</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
        </config_element>
        <config_element name="unifiFrameResponseCfmTxLifetimeTimeOut" psid="2084">
            <description_user>How long to wait to retry a frame (Auth, Assoc, ReAssoc) after TX Cfm trasnmission_status = TxLifetime.
            </description_user>
            <default>10</default>
            <units>TU</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
        </config_element>
        <config_element name="unifiFrameResponseCfmFailureTimeOut" psid="2085">
            <description_user>How long to wait to retry a frame (Auth, Assoc, ReAssoc) after TX Cfm trasnmission_status != Successful | TxLifetime.
            </description_user>
            <default>40</default>
            <units>TU</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
        </config_element>
        <config_element name="unifiConnectionFailureTimeout" psid="2081">
            <description_user>How long the complete connection procedure has before the MLME times out and issues a Connect Indication (fail).
            </description_user>
            <range_min>0</range_min>
            <range_max>4000</range_max>
            <default>1500</default>
            <units>TU</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
        </config_element>
        <config_element name="unifiConnectingProbeTimeout" psid="2082">
            <description_user>How long to wait for a ProbeRsp when syncronising before resending a ProbeReq
            </description_user>
            <range_min>0</range_min>
            <range_max>100</range_max>
            <default>10</default>
            <units>TU</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
        </config_element>
        <config_element name="unifiDisconnectTimeout" psid="2083">
            <description_user>How long the firmware attempts to perform a disconnect (triggered by MLME_DISCONNECT-REQ) before responding with MLME-DISCONNECT-IND and aborting the disconnection attempt. This is particulary important when a SoftAP is attempting to disconnect associated stations which might have "silently" left the ESS.
            </description_user>
            <range_min>0</range_min>
            <range_max>3</range_max>
            <default>2</default>
            <units>seconds</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
        </config_element>
        <config_element name="unifiDisconnectAllTimeout" psid="2086">
            <description_user>How long the firmware attempts to perform a disconnect all STAs (triggered by MLME_DISCONNECT-REQ 00:00:00:00:00:00) before responding with MLME-DISCONNECT-IND and aborting the disconnection attempt. This is particulary important when a SoftAP is attempting to disconnect all associated stations which might have "silently" left the ESS.
            </description_user>
            <range_min>0</range_min>
            <range_max>2000</range_max>
            <default>500</default>
            <units>milliseconds</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
        </config_element>
        <config_element name="unifiBaConfig" psid="2225">
            <description_user>Block Ack Configuration. It is composed of A-MSDU supported, TX MPDU per A-MPDU, RX Buffer size, TX Buffer size and Block Ack Timeout. see init_mlme_ba() for more detail
            </description_user>
            <default>0x3fff00</default>
            <access_rights>read_write</access_rights>
            <type>uint32</type>
            <format>hexadecimal</format>
        </config_element>
        <config_element name="unifiSupportedDataRates" psid="2041">
            <description_user>Defines the supported non-HT data rates. It is encoded as N+1 octets where the first octet is N and the subsequent octets each describe a single supported rate.
            </description_user>
            <access_rights>read_only</access_rights>
            <units>500 kbps</units>
            <type>octet_string</type>
            <range_min>2</range_min>
            <range_max>16</range_max>
            <default>{ 0x02, 0x04, 0x0b, 0x0c, 0x12, 0x16, 0x18, 0x24, 0x30, 0x48, 0x60, 0x6c }
            </default>
        </config_element>
        <config_element name="unifiCCXSupportedVersion" psid="6030">
            <description_user>This value enables/disables CCX to specified version. Initialised on system boot. Possible values: 0-->No CCX supported 1-->CCX v4 supported 2-->CCX v6 (Lite) version supported 3-->CCXv4 and CCXv6 versions supported.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>0</default>
        </config_element>
        <config_element name="unifiCCXLiteFoundationSupportedServices" psid="6031">
            <description_user> This value should show which version of CCX Lite Foundation services is supported by the device. Only valid if CCX Lite supported. Possible values: 1-->CCX Lite Foundation Services v1 supported 2-->CCX Lite Foundation Services v2 supported (v2 includes v1 as well)
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <range_min>1</range_min>
            <range_max>2</range_max>
            <format>unsigned_decimal</format>
            <default>2</default>
        </config_element>
        <config_element name="unifiCCXLiteVoiceSupportedServices" psid="6032">
            <description_user> This value should show which version of of CCX Lite Voice services is supported by the device. Only valid if CCX Lite supported. Possible values: 0-->CCX Lite Voice not supported 1-->CCX Lite Voice Services v1 supported 2-->CCX Lite Voice Services v2 supported (v2 includes v1 as well)
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>1</default>
        </config_element>
        <config_element name="unifiCCXLiteLocationSupportedServices" psid="6033">
            <description_user> This value should show which version of of CCX Lite Location services is supported by the device. Only valid if CCX Lite supported. Possible values: 0-->CCX Lite Location not supported 1-->CCX Lite Location Services v1 supported
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>0</default>
        </config_element>
        <config_element name="unifiCCXVoiceFailureThreshold" psid="6034">
            <description_user> If more than this number of CCX Voice frames fail consecutively then a failure will be reported to MLME, which may cause roaming.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <default>3</default>
        </config_element>
        <config_element name="unifiApOlbcDuration" psid="2076">
            <description_user>How long the AP enables reception of BEACON frames to perform Overlapping Legacy BSS Condition(OLBC). If set to 0 then OLBC is disabled.
            </description_user>
            <default>300</default>
            <range_min>0</range_min>
            <range_max>65535</range_max>
            <units>milliseconds</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
        </config_element>
        <config_element name="unifiApOlbcInterval" psid="2077">
            <description_user>How long between periods of receiving BEACON frames to perform Overlapping Legacy BSS Condition(OLBC). This value MUST exceed the OBLC duration MIB unifiApOlbcDuration. If set to 0 then OLBC is disabled.
            </description_user>
            <default>2000</default>
            <range_min>0</range_min>
            <range_max>65535</range_max>
            <units>milliseconds</units>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
        </config_element>
        <config_element name="unifiMaxClient" psid="2550">
            <description_user>Restricts the maximum number of associated STAs for SoftAP.Defaulted to 0 to allow the Soft AP to allow as many associated STAs as it can support. The Soft AP may restrict the number of associated STAs to less than this value (if non-zero), if the Soft AP is unable to support that many associated STAs. If non-zero the number of associated STAs will not exceed this value.
            </description_user>
            <default>0</default>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
        </config_element>
        <config_element name="unifiPMFAssociationComebackTimeDelta" psid="6050">
            <description_user>This MIB indicates a delta time for the assocication comeback time element in the SA Query request frame. The association comeback time in the SA Query request frame will be set to TSF + unifiPMFAssociationComebackTimeDelta.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <units>TU</units>
            <default>1100</default>
        </config_element>
        <!-- end of Hardmac Elements -->
        <!-- unifiRoamScanTable -->
        <!-- P2P NoA Elements -->
        <config_element name="unifiNoaDuration" psid="2552">
            <description_user> This MIB represents the absence period of P2P NoA in microsecond. If Host want to enable NoA, it needs to set both the unifiNoaDuration and the unifiNoaCount.
            </description_user>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <default>0</default>
            <access_rights>read_write</access_rights>
            <function_list>
                <function type="get" function_name="mibp2puint32get" is_for_vif="true"></function>
                <function type="set" function_name="mibp2puint32set" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiNoaCount" psid="2553">
            <description_user> This mib represents the count of P2P NoA. If the count is 255, then the P2P NoA is the periodic NoA(Infinite). If Host want to enable NoA, it needs to set both the unifiNoaDuration and the unifiNoaCount.
            </description_user>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <range_min>0</range_min>
            <range_max>255</range_max>
            <default>0</default>
            <access_rights>read_write</access_rights>
            <function_list>
                <function type="get" function_name="mibp2puint32get" is_for_vif="true"></function>
                <function type="set" function_name="mibp2puint32set" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiNoaInterval" psid="2554">
            <description_user> This MIB represents the interval of P2P NoA in Time Unit(TU).
            </description_user>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <default>100</default>
            <access_rights>read_write</access_rights>
            <function_list>
                <function type="get" function_name="mibp2puint32get" is_for_vif="true"></function>
                <function type="set" function_name="mibp2puint32set" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiNoaStartOffset" psid="2555">
            <description_user> This MIB represents the start offset of P2P NoA in Time Unit(TU). Firware will calculate the actual start time using this value.
            </description_user>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <default>100</default>
            <access_rights>read_write</access_rights>
            <function_list>
                <function type="get" function_name="mibp2puint32get" is_for_vif="true"></function>
                <function type="set" function_name="mibp2puint32set" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <!-- P2P Opps -->
        <config_element name="unifiCtWindow" psid="2557">
            <description_user> This value represents the CTWindow value.If this MIB is zero, the CTwindow in NoA Attribute will be deleted.
            </description_user>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <default>0</default>
            <access_rights>read_write</access_rights>
            <function_list>
                <function type="get" function_name="mibp2puint32get" is_for_vif="true"></function>
                <function type="set" function_name="mibp2puint32set" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <!-- VHT Activation Control Elements -->
        <config_element name="unifiVhtActivated" psid="2045">
            <description_user>This attribute, when TRUE, indicates that use VHT mode. The capability is disabled otherwise.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <format>signed_decimal</format>
            <default>false</default>
        </config_element>
        <!-- end of VHT Activation Control Elements -->
        <config_element name="unifiTqamActivated" psid="2235">
            <description_user>True indicates that, use Vendor VHT IE for 256-QAM mode on 2.4GHz. The capability is disabled otherwise.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <format>signed_decimal</format>
            <default>false</default>
        </config_element>
        <!-- end of TQAM / Vendor VHT IE -->
        <!-- HT Activation Control Elements -->
        <config_element name="unifiHtActivated" psid="2046">
            <description_user>This attribute, when TRUE, indicates that use HT mode. The capability is disabled otherwise.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <format>signed_decimal</format>
            <default>true</default>
        </config_element>
        <!-- end of HT Activation Control Elements -->
        <config_element name="unifi24G40MHZChannels" psid="2035">
            <description_user>This attribute, when TRUE, enables 40Mz wide channels in the 2.4G band
            </description_user>
            <access_rights>read_only</access_rights>
            <type>boolean</type>
            <format>signed_decimal</format>
            <default>false</default>
        </config_element>
        <config_element name="unifiTxUsingLdpcEnabled" psid="5030">
            <description_user>This attribute, when TRUE, indicates that LDPC will be used to code packets, for transmit only. If set to FALSE, chip will not send LDPC coded packets even if peer supports it. To advertise reception of LDPC coded packets,enable bit 0 of unifiHtCapabilities, and bit 4 of unifiVhtCapabilities.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <format>signed_decimal</format>
            <default>true</default>
        </config_element>
        <!-- Columns -->
        <config_element name="unifiRoamingEnabled" psid="2049">
            <description_user>The Enable MIB location for the Roaming functionality.</description_user>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <format>signed_decimal</format>
            <default>true</default>
        </config_element>
        <config_element name="unifiRssiRoamScanTrigger" psid="2050">
            <description_user>The current RSSI value below which roaming scan shall start
            </description_user>
            <type>int16</type>
            <units>dBm</units>
            <access_rights>read_write</access_rights>
            <range_min>-128</range_min>
            <range_max>127</range_max>
            <default>-75</default>
        </config_element>
        <config_element name="unifiRssiRoamScanNoCandidateDeltaTrigger" psid="2064">
            <description_user>The value by which unifiRssiRoamScanTrigger is lowered when no roaming candidates are found
            </description_user>
            <type>uint16</type>
            <units>dBm</units>
            <access_rights>read_only</access_rights>
            <range_min>1</range_min>
            <range_max>255</range_max>
            <default>10</default>
        </config_element>
        <config_element name="unifiRssiRoamDeltaTrigger" psid="2051">
            <description_user>The RSSI on the target AP must be greater than the current AP RSSI by that value to be oaming candidate
            </description_user>
            <type>uint16</type>
            <units>dBm</units>
            <access_rights>read_write</access_rights>
            <range_min>1</range_min>
            <range_max>255</range_max>
            <default>10</default>
        </config_element>
        <config_element name="unifiCachedChannelScanPeriod" psid="2052">
            <description_user>The scan period for cached channels background roaming (microseconds)
            </description_user>
            <type>uint32</type>
            <access_rights>read_write</access_rights>
            <range_min>1</range_min>
            <default>20000000</default>
        </config_element>
        <config_element name="unifiFullRoamScanPeriod" psid="2053">
            <description_user>DO NOT REMOVE. Although not used in the code, required to pass OKC test 2.7 and 2.8.
            </description_user>
            <type>uint32</type>
            <access_rights>read_write</access_rights>
            <range_min>1</range_min>
            <default>30000000</default>
        </config_element>
        <!-- Deleted: config_element name="unifiRoamScanProbeInterval" psid="2054" -->
        <config_element name="unifiConnectionQualityCheckWaitAfterConnect" psid="2506">
            <description_user>The amount of time a STA will wait after connection before starting to check the MLME-installed connection quality trigger thresholds</description_user>
            <type>uint16</type>
            <units>ms</units>
            <access_rights>read_write</access_rights>
            <range_min>0</range_min>
            <range_max>65535</range_max>
            <default>200</default>
        </config_element>
        <config_element name="unifiRoamScanBand" psid="2055">
            <description_user>Indicates whether only intra-band or all-band should be used for roaming scan. 2 - Roaming across band 1 - Roaming within band
            </description_user>
            <type>uint16</type>
            <access_rights>read_write</access_rights>
            <range_min>1</range_min>
            <range_max>2</range_max>
            <default>2</default>
        </config_element>
        <!-- Deleted: config_element name="unifiRoamScanMinActiveChannelTime" psid="2056" -->
        <config_element name="unifiRoamScanMaxActiveChannelTime" psid="2057">
            <description_user>NCHO channel time. Name confusion for Host compatibility.
            </description_user>
            <type>uint16</type>
            <access_rights>read_write</access_rights>
            <range_min>1</range_min>
            <default>120</default>
        </config_element>
        <config_element name="unifiRoamMode" psid="2060">
            <description_user>Enable/Disable host resume when roaming. 0: Wake up the host all the time. 1: Only wakeup the host if the AP is not white-listed. 2: Don't wake up the host.
            </description_user>
            <type>uint16</type>
            <access_rights>read_write</access_rights>
            <range_min>0</range_min>
            <range_max>2</range_max>
            <default>1</default>
        </config_element>
        <config_element name="unifiRoamOkcEnable" psid="2061">
            <description_user>If set to false, On-Chip OKC is disabled.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <format>signed_decimal</format>
            <default>true</default>
        </config_element>
        <config_element name="unifiRoamEAPTimeout" psid="2065">
            <description_user>Timeout for receiving the first EAP/EAPOL frame from the AP during roaming</description_user>
            <type>uint16</type>
            <units>ms</units>
            <access_rights>read_only</access_rights>
            <range_min>0</range_min>
            <range_max>65535</range_max>
            <default>200</default>
        </config_element>
        <config_element name="unifiRoamScanBackgroundPeriod" psid="2063">
            <description_user>Deprecated by unifiCachedChannelScanPeriod.
            </description_user>
            <type>uint32</type>
            <access_rights>read_write</access_rights>
            <range_min>1</range_min>
            <default>30000000</default>
        </config_element>
        <config_element name="unifiRoamScanControl" psid="2067">
            <description_user>NCHO Roam Scan Control.</description_user>
            <type>boolean</type>
            <access_rights>read_write</access_rights>
            <default>false</default>
        </config_element>
        <config_element name="unifiDfsScanMode" psid="2068">
            <description_user>Scan DFS Mode. 0: DFS scan disabled 0: DFS roaming scan disabled. 1: DFS scan enabled. (passive scanning on DFS channels) 1: DFS roaming scan enabled. Normal mode. i.e. passive scanning on DFS channels (Default) 2: DFS scan enabled. (passive scanning on DFS channels) 2: DFS roaming scan enabled with active scanning on channel list supplied with MLME-SET-CACHED-CHANNELS.request
            </description_user>
            <type>uint16</type>
            <units>TU</units>
            <access_rights>read_write</access_rights>
            <range_min>0</range_min>
            <range_max>2</range_max>
            <default>0</default>
        </config_element>
        <config_element name="unifiRoamScanHomeTime" psid="2069">
            <description_user>The maximum time to spend scanning before pausing for the unifiRoamScanHomeAwayTime, default of 0 mean has no specific requirement
            </description_user>
            <type>uint16</type>
            <units>TU</units>
            <access_rights>read_write</access_rights>
            <range_min>0</range_min>
            <range_max>65535</range_max>
            <default>45</default>
        </config_element>
        <config_element name="unifiRoamScanHomeAwayTime" psid="2070">
            <description_user>The time to spend NOT scanning after scanning for unifiRoamScanHomeTime,default of 0 mean has no specific requirement
            </description_user>
            <type>uint16</type>
            <units>TU</units>
            <access_rights>read_write</access_rights>
            <range_min>0</range_min>
            <range_max>65535</range_max>
            <default>100</default>
        </config_element>
        <config_element name="unifiRoamScanNProbe" psid="2072">
            <description_user>The Number of ProbeReq per channel for the Roaming Scan.</description_user>
            <type>uint16</type>
            <access_rights>read_write</access_rights>
            <range_min>0</range_min>
            <range_max>65535</range_max>
            <default>2</default>
        </config_element>
        <config_element name="unifiVS2RoamingCount" psid="2073">
            <description_user>Number of Roams since Connect or last set to 0.  (CCX Voice Services: Roaming Count)</description_user>
            <type>uint16</type>
            <access_rights>read_write</access_rights>
            <range_min>0</range_min>
            <range_max>65535</range_max>
            <default>0</default>
        </config_element>
        <config_element name="unifiVS2RoamingDelay" psid="2074">
            <description_user>milliseconds taken for last roam (CCX Voice Services: Roaming Delay)</description_user>
            <type>uint16</type>
            <units>ms</units>
            <access_rights>read_write</access_rights>
            <range_min>0</range_min>
            <range_max>65535</range_max>
            <default>0</default>
        </config_element>
        <config_element name="unifiRoamingTriggerTime" psid="2090">
            <description_user>Timestamp of last roam tigger. Timestamp of any trigger for roaming. Caused by Link loss, Rssi, mlme_roam_req etc</description_user>
            <type>uint32</type>
            <units>us</units>
            <access_rights>read_write</access_rights>
            <range_min>0</range_min>
            <range_max>4294967295</range_max>
            <default>0</default>
        </config_element>
        <config_element name="unifiRoamingStartTime" psid="2091">
            <description_user>Timestamp of last roam start. Start of a connection attempt to an AP (Starts at Dataplane Pause)</description_user>
            <type>uint32</type>
            <units>us</units>
            <access_rights>read_write</access_rights>
            <range_min>0</range_min>
            <range_max>4294967295</range_max>
            <default>0</default>
        </config_element>
        <config_element name="unifiRoamingOnchipEndTime" psid="2092">
            <description_user>Timestamp of last roam end for the onchip portion of the roam. mlme_roamed_ind to Host</description_user>
            <type>uint32</type>
            <units>us</units>
            <access_rights>read_write</access_rights>
            <range_min>0</range_min>
            <range_max>4294967295</range_max>
            <default>0</default>
        </config_element>
        <config_element name="unifiRoamingEndTime" psid="2093">
            <description_user>Timestamp of last roam end. Keys installed and Dataplane unpaused.</description_user>
            <type>uint32</type>
            <units>us</units>
            <access_rights>read_write</access_rights>
            <range_min>0</range_min>
            <range_max>4294967295</range_max>
            <default>0</default>
        </config_element>
        <!-- end of unifiRoamScanTable -->
        <config_element name="dot11TDLSPeerUAPSDIndicationWindow" psid="53">
            <description_user>The minimum time that needs to pass after the most recent TPU SP, before a RAME_TPU_SP indication can be sent to MLME
            </description_user>
            <type>uint16</type>
            <units>beacon intervals</units>
            <access_rights>read_write</access_rights>
            <range_min>0</range_min>
            <range_max>65535</range_max>
            <default>1</default>
        </config_element>
        <!-- mibs for RAA -->
        <config_element name="unifiRaaTxHostRate" psid="4148">
            <description_user> This MIB is use for host to set a fixed TX rate.
            Ideally this should be done by the driver, but since there isn't support for it yet,
            the best solution is to set it through this MIB. Default is 0 so that the getter
            of this MIB nows that this means "host did not specified any rate".
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <function_list>
                <function type="set" function_name="mibuint16set" is_for_vif="false" ></function>
                <function type="get" function_name="mibuint16get" is_for_vif="false" ></function>
            </function_list>
            <!-- <default>16385</default> 11b 1M long preamble -->
            <!-- <default>32774</default> 11n MCS6 -->
            <!-- <default>32775</default> 11n MCS7 -->
            <default>0</default>
        </config_element>
        <config_element name="unifiRaaSpeculationInterval" psid="4140">
            <description_user>For Rate Adaptation Algorithm. It defines the repeatable amount of time, in ms, that
            firmware will start to send speculation frames.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <function_list>
                <function type="set" function_name="mibuint16set" is_for_vif="false" ></function>
                <function type="get" function_name="mibuint16get" is_for_vif="false" ></function>
            </function_list>
           <default>100</default>
        </config_element>
        <config_element name="unifiRaaSpeculationPeriod" psid="4141">
            <description_user>For Rate Adaptation Algorithm. It defines the max amount of time, in ms, that
            firmware will use for sending speculation frames
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <function_list>
                <function type="set" function_name="mibuint16set" is_for_vif="false" ></function>
                <function type="get" function_name="mibuint16get" is_for_vif="false" ></function>
            </function_list>
            <default>10</default>
        </config_element>
        <config_element name="unifiRaaNumbSpeculationFrames" psid="4142">
            <description_user>For Rate Adaptation Algorithm. It defines the max amount of speculation frames that firmware is
            allowed to send.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <function_list>
                <function type="set" function_name="mibuint16set" is_for_vif="false" ></function>
                <function type="get" function_name="mibuint16get" is_for_vif="false" ></function>
            </function_list>
            <default>9</default>
        </config_element>
        <config_element name="unifiRaaTxSuccessesCount" psid="4143">
            <description_user>For Rate Adaptation Algorithm. It represents the number of transmitted
            frames that were acked at a given rate.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <table_name>unifiRateStatsTable</table_name>
            <function_list>
                <function type="get" function_name="mibraaratestatsget" is_for_vif="true" ></function>
            </function_list>
        </config_element>
        <config_element name="unifiRaaTxFailuresCount" psid="4144">
            <description_user>For Rate Adaptation Algorithm. It represents the number of transmitted
            frames that were NOT acked at a given rate.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <table_name>unifiRateStatsTable</table_name>
            <function_list>
                <function type="get" function_name="mibraaratestatsget" is_for_vif="true" ></function>
            </function_list>
        </config_element>
        <config_element name="unifiRaaTxPer" psid="4145">
            <description_user>For Rate Adaptation Algorithm. It represents the Packet Error Rate
            for a given rate on the RAA rate stats.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <table_name>unifiRateStatsTable</table_name>
            <function_list>
                <function type="get" function_name="mibraaratestatsget" is_for_vif="true" ></function>
            </function_list>
        </config_element>
        <config_element name="unifiRaaTxMTPer" psid="4147">
            <description_user>For Rate Adaptation Algorithm. It represents the Maximum Tolerable Packet Error
            Rate for each rate.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <table_name>unifiRateStatsTable</table_name>
            <function_list>
                <function type="get" function_name="mibraaratestatsget" is_for_vif="true" ></function>
            </function_list>
        </config_element>
        <config_element name="unifiRaaResetStats" psid="4146">
            <description_user>For Rate Adaptation Algorithm. It Resets the stats table used by the RAA.
            </description_user>
            <access_rights>write_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <table_name>unifiRateStatsTable</table_name>
            <function_list>
                <function type="set" function_name="mibratestatsreset" is_for_vif="true" ></function>
            </function_list>
        </config_element>
        <!-- RAA end -->
        <!-- mibs for Fallback -->
        <config_element name="unifiFallbackShortFrameRetryDistribution" psid="4149">
            <description_user> Configure the retry distribution for fallback for short frames
	        octet 0 - Number of retries for starting rate.
                octet 1 - Number of retries for next rate.
                octet 2 - Number of retries for next rate.
                octet 3 - Number of retries for next rate.
                octet 4 - Number of retries for last rate.
                If 0 is written to an entry then the retries for that rate will be the short retry limit minus the sum
                of the retries for each rate above that entry (e.g. 15 - 5). Therefore, this should always be the value for octet 4.
                Also, when the starting rate has short guard enabled, the number of retries in octet 1 will be used and
                for the next rate in the fallback table (same MCS value, but with sgi disabled) octet 0 number of retries will
                be used.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>octet_string</type>
            <range_min>5</range_min>
            <range_max>5</range_max>
            <default>{0x01, 0x01, 0x01, 0x01, 0x00}</default>
            <function_list>
                <function type="get" function_name="mibdplanefallbackget" is_for_vif="false" ></function>
                <function type="set" function_name="mibdplanefallbackset" is_for_vif="false" ></function>
            </function_list>
       </config_element>
       <!-- mibs for Fallback end -->
       <!-- mibs for Dplane debug -->
       <config_element name="unifiDPlaneDebug" psid="6073">
            <description_user> Bit mask for turning on individual debug entities in
            the data_plane that if enabled effect throughput. See DPLP_DEBUG_ENTITIES_T in
            dplane_dplp_debug.h for bits.
            Default of 0x3 means dplp and ampdu logs are enabled.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <default>0x3</default>
            <function_list>
                <function type="get" function_name="mibdplanedebugmaskget" is_for_vif="false" ></function>
                <function type="set" function_name="mibdplanedebugmaskset" is_for_vif="false" ></function>
            </function_list>
        </config_element>
        <!-- mibs for Dplane debug -->
        <config_element name="unifiThroughputDebug" psid="2254">
            <description_user> This MIB is used to access throughput related counters that can help diagnose throughput problems.
            The index of the MIB will access different counters, as described in SC-506328-DD.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>uint16</type>
            <format>unsigned_decimal</format>
            <table_name>unifiThroughputDebugTable</table_name>
            <function_list>
                <function type="get" function_name="mibthroughputdiagnosticsget" is_for_vif="true" ></function>
            </function_list>
        </config_element>
        <!-- MIBs for Link Layer Statistics -->
        <config_element name="unifiBeaconReceived" psid="2228">
            <description_user>Access point beacon received count from connected AP
            </description_user>
            <access_rights>read_only</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <function_list>
                <function type="get" function_name="mibllsstatsget" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiACRetries" psid="2229">
            <description_user>It represents the number of retransmitted frames under each ac priority
	    (indexed by unifiAccessClassIndex). This number will wrap to zero after the range is exceeded.
            </description_user>
            <access_rights>read_only</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <table_name>unifiAcTxConfirmTable</table_name>
            <function_list>
                <function type="get" function_name="mibllsstatsget" is_for_vif="true"></function>
            </function_list>
        </config_element>
        <config_element name="unifiRadioOnTime" psid="2230">
            <description_user>msecs the radio is awake (32 bits number accruing over time)
            </description_user>
            <access_rights>read_only</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <function_list>
                <function type="get" function_name="mibllsstatsget" is_for_vif="false"></function>
            </function_list>
        </config_element>
        <config_element name="unifiRadioTxTime" psid="2231">
            <description_user>msecs the radio is transmitting (32 bits number accruing over time)
            </description_user>
            <access_rights>read_only</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <function_list>
                <function type="get" function_name="mibllsstatsget" is_for_vif="false"></function>
            </function_list>
        </config_element>
        <config_element name="unifiRadioRxTime" psid="2232">
            <description_user>msecs the radio is in active receive (32 bits number accruing over time)
            </description_user>
            <access_rights>read_only</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <function_list>
                <function type="get" function_name="mibllsstatsget" is_for_vif="false"></function>
            </function_list>
        </config_element>
        <config_element name="unifiRadioScanTime" psid="2233">
            <description_user>msecs the radio is awake due to all scan (32 bits number accruing over time)
            </description_user>
            <access_rights>read_only</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <function_list>
                <function type="get" function_name="mibllsstatsget" is_for_vif="false"></function>
            </function_list>
        </config_element>
        <config_element name="unifiPSLeakyAP" psid="2234">
            <description_user>indicate that this AP typically leaks packets beyond the guard time (5msecs).
            </description_user>
            <access_rights>read_only</access_rights>
            <type>uint32</type>
            <format>unsigned_decimal</format>
            <default>0</default>
            <function_list>
                <function type="get" function_name="mibllsstatsget" is_for_vif="true" ></function>
            </function_list>
        </config_element>
        <!-- End of MIBs for Link Layer Statistics -->
        <config_element name="unifiRadioMeasurementActivated" psid="2043">
            <description_user>When TRUE Radio Measurements are supported. The capability is disabled otherwise.</description_user>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <format>signed_decimal</format>
            <default>true</default>
        </config_element>
        <config_element name="unifiRadioMeasurementCapabilities" psid="2044">
            <description_user>This MIB variable indicates the RM Enabled capabilities of the chip. See SC-503520-SP for further details.</description_user>
            <access_rights>read_write</access_rights>
            <type>octet_string</type>
            <range_min>5</range_min>
            <range_max>5</range_max>
            <default>{ 0x71, 0x00, 0x00, 0x00, 0x00 }</default>
        </config_element>
        <config_element name="unifiOverrideDefaultBETXOP" psid="2365">
            <description_user>When set to non-zero value then this will override the BE TXOP for 11g (in 32 usec units) to the value specified here.
            </description_user>
            <access_rights>read_write</access_rights>
             <type>uint16</type>
            <default>78</default>
        </config_element>
        <config_element name="unifiOverrideDefaultBETXOPForHT" psid="2364">
            <description_user>When set to non-zero value then this will override the BE TXOP for 11n and higher modulations (in 32 usec units) to the value specified here.
            </description_user>
            <access_rights>read_write</access_rights>
             <type>uint16</type>
            <default>0</default>
        </config_element>
        <config_element name="unifiRXABBTrimSettings" psid="2366">
          <description_user>Various settings to change RX ABB filter trim behavior.</description_user>
            <access_rights>read_write</access_rights>
             <type>uint32</type>
             <format>unsigned_decimal</format>
            <default>0</default>
        </config_element>
        <config_element name="unifiRadioTrimsEnable" psid="2367">
          <description_user>A bitmap for enabling/disabling trims at runtime
| lsb | trim     |
|-----+----------|
|   0 | RX ABB   |
|   1 | TX ABB   |
other trims might follow.
          </description_user>
            <access_rights>read_write</access_rights>
             <type>uint32</type>
             <format>unsigned_decimal</format>
            <default>1</default>
        </config_element>
        <config_element name="unifiRadioCCAThresholds" psid="2368">
          <description_user>The CCA thresholds so that the CCA-ED triggers at the regulatory value of -62 dBm. Gain threshold in the lower octet and RSSI threshold in the higher octet.
          </description_user>
            <access_rights>read_write</access_rights>
             <type>uint16</type>
             <format>unsigned_decimal</format>
            <default>0x1c32</default>
        </config_element>
        <config_element name="unifiHardwarePlatform" psid="2369">
          <description_user>This MIB specifies the hardware platform. This is necessary so we can apply tweaks to specific revisions, even though they might be running the same baseband and RF chip combination. Check unifiHardwarePlatform enum for description of the possible values.
          </description_user>
          <access_rights>read_write</access_rights>
          <type>unifiHardwarePlatform</type>
          <format>unsigned_decimal</format>
          <default>1</default>
        </config_element>
        <config_element name="unifiDPDTrainingDuration" psid="2371">
          <description_user>This MIB specifies the duration of DPD training (in ms).
          </description_user>
          <access_rights>read_write</access_rights>
          <type>uint16</type>
          <format>unsigned_decimal</format>
          <default>1</default>
        </config_element>
        <config_element name="unifiTPCEnabled" psid="6019">
            <description_user> This mib enables/disables TPC control.
            Setting it to 1 enables TPC, 0 will diable it.
            </description_user>
            <access_rights>read_write</access_rights>
            <type>boolean</type>
            <default>1</default>
        </config_element>
        <config_table table_name="dot11RSNAStatsTable" num_indices="2">
            <description_user>This table maintains per-STA statistics in an RSN. The entry with dot11RSNAStatsSTAAddress set to FF-FF-FF-FF-FF-FF shall contain statistics for broadcast/multicast traffic.
            </description_user>
            <index1 name="dot11RSNAConfigIndex" />
            <index2 name="dot11RSNAStatsIndex" />
        </config_table>
        <config_table table_name="unifiCSROnlyPatchTable" num_indices="1">
            <description_user>Table of integers for use by patches.</description_user>
            <index1 name="unifiCSROnlyPatchIndex" />
        </config_table>
        <config_table table_name="unifiCSROnlyRawDataMemoryTable" num_indices="1">
            <description_user>Conceptual table for reading MAC data memory (including registers).
            </description_user>
            <index1 name="unifiPrivateOnlyRawDataMemoryIndex" />
        </config_table>
        <config_table table_name="unifiCSROnlyRawRegistersTable" num_indices="1">
            <description_user>Conceptual table for specifying arbitrary registers to modify. This is intended as a last resort for tweaking the hardware behaviour with released firmware builds that do not provide more appropriate MIB attributes. This mechanism should not be used unless there is no other technique for providing the required functionality.
            </description_user>
            <index1 name="unifiPrivateOnlyRawRegisterIndex" />
            <is_internal>true</is_internal>
        </config_table>
        <config_table table_name="unifiQueueStatsIdTable" num_indices="1">
            <description_user>Conceptual table for timing of queue transfers HOST-SW-HW</description_user>
            <index1 name="unifiQueueStatsIndex" />
        </config_table>
        <config_table table_name="unifiRateStatsTable" num_indices="1">
            <description_user>Conceptual table for transmit/receive rate statistics.</description_user>
            <index1 name="unifiRateStatsIndex" />
        </config_table>
        <config_table table_name="unifiThroughputDebugTable" num_indices="1">
            <description_user>Conceptual table for throughput diagnostics counters.</description_user>
            <index1 name="unifiThroughputDebugIndex" />
        </config_table>
        <config_table table_name="unifiReadRegTable" num_indices="1">
            <description_user>Conceptual table for reading registers.</description_user>
            <index1 name="unifiReadRegIndex" />
        </config_table>
        <config_table table_name="unifiTxPowerAdjustmentTable" num_indices="1">
            <description_user>Group of attributes for unifiTxPowerAdjustmentTable. Implemented as a table indexed by interface.
            </description_user>
            <index1 name="unifiTxPowerAdjustmentIndex" />
        </config_table>
        <config_table table_name="unifiLoadDpdLutTable" num_indices="2">
            <description_user> This table contains hardware specific transmitter settings. Entries in this table should only be altered after advice from Applications Support.
            </description_user>
            <index1 name="unifiLoadDpdLutGroupIndex" />
            <index2 name="unifiLoadDpdLutTemperatureIndex" />
        </config_table>
        <config_table table_name="unifiTxSettingsTable" num_indices="1">
            <description_user> This table contains hardware specific transmitter settings. Entries in this table should only be altered after advice from Applications Support.
            </description_user>
            <index1 name="unifiTxSettingsTableIndex" />
        </config_table>
        <config_table table_name="unifiTxGainSettingsTable" num_indices="1">
            <description_user> This table contains hardware specific transmitter gain settings. Entries in this table should only be altered after advice from Applications Support.
            </description_user>
            <index1 name="unifiTxGainSettingsTableIndex" />
        </config_table>
        <config_table table_name="unifiTxPowerDetectorResponseTable" num_indices="1">
            <description_user> This table contains hardware specific transmitter settings. Entries in this table should only be altered after advice from Applications Support.
            </description_user>
            <description_internal> This table defines the response of the power detectors(2G5/5G) in the external FEM. The detectors are sampled via the BIST ADC. The reference temperature and frequencies for this table are implicitly defined by the related temperature and frequency compensation tables.
            </description_internal>
            <index1 name="unifiTxPowerDetectorResponseTableIndex" />
        </config_table>
        <config_table table_name="unifiTxDetectorTemperatureCompensationTable" num_indices="1">
            <description_user> This table contains hardware specific transmitter settings. Entries in this table should only be altered after advice from Applications Support.
            </description_user>
            <description_internal> This table is used to compensate detector measurements for temperature. The reference temperature for temperature compensation is implicitly defined by the temperature at which the (interpolated) table values return zero correction.
            </description_internal>
            <index1 name="unifiTxDetectorTemperatureCompensationTableIndex" />
        </config_table>
        <config_table table_name="unifiTxDetectorFrequencyCompensationTable" num_indices="1">
            <description_user> This table contains hardware specific transmitter settings. Entries in this table should only be altered after advice from Applications Support.
            </description_user>
            <description_internal> This table is used to compensate detector measurements for frequency. The reference frequency for frequency compensation is implicitly defined by the frequency at which the (interpolated) table values return zero correction.
            </description_internal>
            <index1 name="unifiTxDetectorTemperatureCompensationTableIndex" />
        </config_table>
        <config_table table_name="unifiTxOpenLoopTemperatureCompensationTable" num_indices="1">
            <description_user> This table contains hardware specific transmitter settings. Entries in this table should only be altered after advice from Applications Support.
            </description_user>
            <description_internal> This table is used to open-loop compensate forward path gains for self-heating between transmit power calibrations. The reference temperature for temperature compensation is implicitly defined by the temperature at which the (interpolated) table values return zero correction.
            </description_internal>
            <index1 name="unifiTxOpenLoopTemperatureCompensationTableIndex" />
        </config_table>
        <config_table table_name="unifiTxOpenLoopFrequencyCompensationTable" num_indices="1">
            <description_user> This table contains hardware specific transmitter settings. Entries in this table should only be altered after advice from Applications Support.
            </description_user>
            <description_internal> This table is used to open-loop compensate forward path gains across frequency between transmit power calibrations. The reference frequency for frequency compensation is implicitly defined by the frequency at which the (interpolated) table values return zero correction.
            </description_internal>
            <index1 name="unifiTxOpenLoopFrequencyCompensationTableIndex" />
        </config_table>
        <config_table table_name="unifiTxAntennaConnectionLossTable" num_indices="1">
            <description_user>The table giving the frequency-dependent connection loss value, which is used as conversion factors for raw tx power at connector
            </description_user>
            <index1 name="unifiTxAntennaConnectionLossTableIndex" />
        </config_table>
        <config_table table_name="unifiTxAntennaMaxGainTable" num_indices="1">
            <description_user>The table giving the frequency-dependent antenna max gain value, which is used as conversion factors for raw tx power at connector
            </description_user>
            <index1 name="unifiTxAntennaMaxGainTableIndex" />
        </config_table>
        <config_table table_name="unifiRxExternalGainTable" num_indices="1">
            <description_user>The table giving frequency-dependent RSSI offset value</description_user>
            <index1 name="unifiRxExternalGainTableIndex" />
        </config_table>
        <config_table table_name="unifiTxOOBConstraintTable" num_indices="1">
            <description_user> Table containing settings necessary to ensure the IC observes transmit out-of-band regulatory constraints when operating near band edges.
            </description_user>
            <index1 name="unifiTxOOBConstraintTableIndex" />
        </config_table>
        <config_table table_name="unifiTxPowerAdjustTable" num_indices="1">
            <description_user> This table allows you to adjust absolute transmit power in a frequency and/or temperature dependant manner. The table allows you to specify datapoints in quarter dB based on frequency and temperature. The firmware will then perform a 2D interpolation to perform the right adjustment for the current frequency and temperature.
            </description_user>
            <index1 name="unifiTxPowerAdjustTableIndex" />
        </config_table>
        <config_table table_name="unifiDebugControlTable" num_indices="1">
            <description_user>The table is used to control various debug settings on a per module basis
            </description_user>
            <index1 name="unifiDebugControlTableIndex" />
        </config_table>
        <config_table table_name="unifiRegulatoryTable" num_indices="1">
            <description_user> This table holds the regulatory information for all countries.
            </description_user>
            <index1 name="unifiRegulatoryTableIndex" />
        </config_table>
        <config_table table_name="unifiRoamScanTable" num_indices="1">
            <description_user> This table contains the parameters for Roaming Scan.
            </description_user>
            <index1 name="unifiRoamScanTableIndex" />
        </config_table>
        <config_table table_name="unifiPeerIdTable" num_indices="1">
            <description_user> Conceptual table for peer stats (RSSI, average Tx rate), index by Pid.
            </description_user>
            <index1 name="unifiPeerid" />
        </config_table>
        <config_table table_name="unifiOperatingClassTable" num_indices="1">
            <description_user> Operating Class table
            </description_user>
            <index1 name="unifiOperatingClassIndex" />
        </config_table>
        <config_table table_name="unifiScanParametersTable" num_indices="1">
            <description_user> Scan Parameters table
            </description_user>
            <index1 name="unifiScanParametersIndex" />
        </config_table>
        <config_table table_name="unifiSarBackoffTable" num_indices="1">
            <description_user> Scan Parameters table
            </description_user>
            <index1 name="unifiSarBackoffIndex" />
        </config_table>
        <config_table table_name="unifiAcTxConfirmTable" num_indices="1">
            <description_user> Conceptual table for requesting Tx confirm, index by Access Class.
            </description_user>
            <index1 name="unifiAccessClassIndex" />
        </config_table>
        <config_table table_name="unifiDefaultCountryTable" num_indices="1">
            <description_user>Table of country codes.</description_user>
            <index1 name="unifiDefaultCountryIndex" />
        </config_table>
        <config_table table_name="unifiDebugConfigTable" num_indices="1">
            <description_user> Debug modules table
            </description_user>
            <index1 name="unifiDebugModulesIndex" />
        </config_table>
    </metadata>
</metadata_list>
